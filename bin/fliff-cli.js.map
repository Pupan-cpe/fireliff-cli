{"version":3,"sources":["../lib/fliff-cli.js"],"names":["colors","setTheme","silly","input","verbose","prompt","info","data","help","warn","code","error","commandLineArgs","require","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","type","String","alias","Boolean","indexOf","then","config","accessToken","line","access_token","viewNames","req","res","LIFFAddRequest","view","url","console","log","send","process","exit","liffId","LIFFConfig","setView","LIFFDeleteRequest","id","getViewIdByName","response","message","getViewNamesById","Promise","all","map","viewName","unsetView","LIFFGetRequest","table","apps","app","views","Object","keys","filter","key","join","LIFFUpdateRequest","getViewNameById","pjson","version"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as colors from 'colors';\nimport pjson from '../package.json';\nimport { LIFFAddRequest, LIFFConfig, LIFFDeleteRequest, LIFFGetRequest, LIFFUpdateRequest } from '.';\nimport { getValidatedConfig } from './shared';\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    info: 'green',\n    data: 'white',\n    help: 'cyan',\n    warn: 'yellow',\n    code: 'blue',\n    error: 'red'\n});\n\nconst commandLineArgs = require('command-line-args');\nconst { operation, _unknown } = commandLineArgs([\n    { name: 'operation', defaultOption: true }\n], { stopAtFirstUnknown: true });\nconst argv = _unknown || [];\nconst options = commandLineArgs([\n    { name: 'id', type: String },\n    { name: 'name', type: String },\n    { name: 'type', type: String },\n    { name: 'url', type: String },\n    { name: 'version', alias: 'v', type: Boolean }\n], { argv });\n\n// Commands that need Functions config\nif (['add', 'update', 'delete', 'get'].indexOf(operation) > -1) {\n    getValidatedConfig().then(async (config) => {\n        let accessToken = config.line.access_token;\n        let viewNames;\n        let data;\n        let req;\n        let res;\n\n        switch (operation) {\n            case 'add':\n                req = new LIFFAddRequest({ accessToken });\n                data = {\n                    view: {\n                        type: options.type,\n                        url: options.url\n                    }\n                };\n                try {\n                    console.log('Sending request to add LIFF view...'.verbose);\n                    res = await req.send(data);\n                } catch (error) {\n                    console.log(`Failed to add LIFF view`.error);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                try {\n                    console.log(`Created ${options.name.input} view with LIFF ID: ${res.data.liffId.info}`.verbose);\n                    await LIFFConfig.setView(options.name, res.data.liffId);\n                } catch (error) {\n                    console.log(`Failed to set Functions configuration`.error);\n                    console.log(`Try re-run with the following command`.help);\n                    console.log(`firebase functions:config:set views.${options.name}=${res.data.liffId}`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                break;\n\n            case 'delete':\n                req = new LIFFDeleteRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run ${'fliff delete --id <liffId>'.input} OR  ${'fliff delete --name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (options.name) {\n                    options.id = await LIFFConfig.getViewIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    console.log(`Sending request to delete LIFF view ${options.id.input}`.verbose);\n                    res = await req.send(options.id);\n                    console.log(`Deleted view with LIFF ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'not found') {\n                            console.log('LIFF app not found'.info);\n                        } else {\n                            console.log(`Failed to delete LIFF view ${options.id.input}`.error);\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.log(`Failed to delete LIFF view ${options.id.input}`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    viewNames = await LIFFConfig.getViewNamesById(options.id, config);\n                    await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n                    console.log(`Unset view(s) in Functions configuration`.info, viewNames);\n                } catch (error) {\n                    console.log(`Failed to unset view(s) in Functions configuration`.error);\n                    console.log(`Try looking for view name with LIFF ID ${options.id.input} using ${'fliff get'.prompt} command and unset it manually`.help);\n                    console.log(`firebase functions:config:unset views.<viewName>`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n                break;\n\n            case 'get':\n                req = new LIFFGetRequest({ accessToken });\n                try {\n                    console.log('Sending request to get LIFF view(s)...'.verbose);\n                    res = await req.send();\n                    console.table(res.data.apps.map(app => {\n                        const views = Object.keys(config.views).filter(key => {\n                            return config.views[key] === app.liffId;\n                        });\n\n                        return {\n                            'View': views.join(', '),\n                            'LIFF ID': app.liffId,\n                            'Type': app.view.type,\n                            'URL': app.view.url\n                        };\n                    }));\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'no apps') {\n                            console.log('LIFF app not found'.info);\n                            process.exit(0);\n                        } else {\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                break;\n\n            case 'update':\n                req = new LIFFUpdateRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'fliff update'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (!options.id) {\n                    options.id = await LIFFConfig.getViewIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n                if (!options.name) {\n                    options.name = await LIFFConfig.getViewNameById(options.id, config);\n                    if (typeof options.name !== 'string') {\n                        console.error(`Failed to retrieve view name with LIFF ID ${options.id.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                if (!options.type || !options.url) {\n                    console.warn(`Command ${'fliff update'.prompt} required both LIFF type AND url options to be updated`.warn);\n                    console.log(`Try re-run with options ${'--type <type> --url <url>'.input}`.help);\n                    process.exit(1);\n                }\n\n                data = {\n                    type: options.type,\n                    url: options.url\n                };\n\n                try {\n                    console.log(`Sending request to update LIFF view ${options.id.input}`.verbose);\n                    res = await req.send(options.id, data);\n                    console.log(`Updated view with LIFF ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    console.log(`Failed to update LIFF view ${options.id.input}`.error);\n                    if (error.response && error.response.data && error.response.data.message) {\n                        console.log(error.response.data.message.error, data);\n                    } else {\n                        console.error(error);\n                    }\n                    process.exit(1);\n                }\n\n                break;\n\n            default:\n\n        }\n\n    });\n} else if (operation) {\n    switch (operation) {\n        case 'version':\n            console.log(`Version: ${pjson.version}`);\n            break;\n        case 'help':\n        default:\n            // TODO: Display help message\n    }\n} else if (options.version) {\n    console.log(`Version: ${pjson.version}`);\n}\n"],"file":"fliff-cli.js"}