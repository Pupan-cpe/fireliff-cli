{"version":3,"sources":["../lib/fliff-cli.js"],"names":["commandLineArgs","require","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","type","String","alias","Boolean","indexOf","then","config","accessToken","line","access_token","viewNames","data","req","res","LIFFAddRequest","view","url","console","log","verbose","send","error","process","exit","input","liffId","info","LIFFConfig","setView","help","code","LIFFDeleteRequest","id","warn","prompt","getViewIdByName","response","message","getViewNamesById","Promise","all","map","viewName","unsetView","LIFFGetRequest","table","apps","app","views","Object","keys","filter","key","join","LIFFUpdateRequest","getViewNameById","FLIFF","init","path","resolve","cwd","pjson","version"],"mappings":"AAAA;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA0BH,eAAe,CAAC,CAC5C;AAAEI,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,aAAa,EAAE;AAApC,CAD4C,CAAD,EAE5C;AAAEC,EAAAA,kBAAkB,EAAE;AAAtB,CAF4C,CAA/C;AAGA,MAAMC,IAAI,GAAGJ,QAAQ,IAAI,EAAzB;AACA,MAAMK,OAAO,GAAGR,eAAe,CAAC,CAC5B;AAAEI,EAAAA,IAAI,EAAE,IAAR;AAAcK,EAAAA,IAAI,EAAEC;AAApB,CAD4B,EAE5B;AAAEN,EAAAA,IAAI,EAAE,MAAR;AAAgBK,EAAAA,IAAI,EAAEC;AAAtB,CAF4B,EAG5B;AAAEN,EAAAA,IAAI,EAAE,MAAR;AAAgBK,EAAAA,IAAI,EAAEC;AAAtB,CAH4B,EAI5B;AAAEN,EAAAA,IAAI,EAAE,KAAR;AAAeK,EAAAA,IAAI,EAAEC;AAArB,CAJ4B,EAK5B;AAAEN,EAAAA,IAAI,EAAE,SAAR;AAAmBO,EAAAA,KAAK,EAAE,GAA1B;AAA+BF,EAAAA,IAAI,EAAEG;AAArC,CAL4B,CAAD,EAM5B;AAAEL,EAAAA;AAAF,CAN4B,CAA/B,C,CAQA;;AACA,IAAI,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,EAA4B,KAA5B,EAAmCM,OAAnC,CAA2CX,SAA3C,IAAwD,CAAC,CAA7D,EAAgE;AAC5D,oCAAqBY,IAArB,CAA0B,MAAOC,MAAP,IAAkB;AACxC,QAAIC,WAAW,GAAGD,MAAM,CAACE,IAAP,CAAYC,YAA9B;AACA,QAAIC,SAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,GAAJ;AACA,QAAIC,GAAJ;;AAEA,YAAQpB,SAAR;AACI,WAAK,KAAL;AACImB,QAAAA,GAAG,GAAG,IAAIE,gBAAJ,CAAmB;AAAEP,UAAAA;AAAF,SAAnB,CAAN;AACAI,QAAAA,IAAI,GAAG;AACHI,UAAAA,IAAI,EAAE;AACFf,YAAAA,IAAI,EAAED,OAAO,CAACC,IADZ;AAEFgB,YAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFX;AADH,SAAP;;AAMA,YAAI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCC,OAAlD;AACAN,UAAAA,GAAG,GAAG,MAAMD,GAAG,CAACQ,IAAJ,CAAST,IAAT,CAAZ;AACH,SAHD,CAGE,OAAOU,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAa,yBAAD,CAA0BG,KAAtC;AACAJ,UAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED,YAAI;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAa,WAAUnB,OAAO,CAACJ,IAAR,CAAa6B,KAAM,uBAAsBX,GAAG,CAACF,IAAJ,CAASc,MAAT,CAAgBC,IAAK,EAAzE,CAA2EP,OAAvF;AACA,gBAAMQ,aAAWC,OAAX,CAAmB7B,OAAO,CAACJ,IAA3B,EAAiCkB,GAAG,CAACF,IAAJ,CAASc,MAA1C,CAAN;AACH,SAHD,CAGE,OAAOJ,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAD,CAAwCG,KAApD;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAD,CAAwCW,IAApD;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAsCnB,OAAO,CAACJ,IAAK,IAAGkB,GAAG,CAACF,IAAJ,CAASc,MAAO,EAAvE,CAAyEK,IAArF;AACAb,UAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED;;AAEJ,WAAK,QAAL;AACIX,QAAAA,GAAG,GAAG,IAAImB,mBAAJ,CAAsB;AAAExB,UAAAA;AAAF,SAAtB,CAAN;;AACA,YAAI,CAACR,OAAO,CAACiC,EAAT,IAAe,CAACjC,OAAO,CAACJ,IAA5B,EAAkC;AAC9BsB,UAAAA,OAAO,CAACgB,IAAR,CAAc,WAAU,eAAeC,MAAO,kCAAjC,CAAmED,IAAhF;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAa,cAAa,6BAA6BM,KAAM,QAAO,iCAAiCA,KAAM,EAA/F,CAAiGK,IAA7G;AACAP,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED,YAAIxB,OAAO,CAACJ,IAAZ,EAAkB;AACdI,UAAAA,OAAO,CAACiC,EAAR,GAAa,MAAML,aAAWQ,eAAX,CAA2BpC,OAAO,CAACJ,IAAnC,EAAyCW,MAAzC,CAAnB;;AACA,cAAI,OAAOP,OAAO,CAACiC,EAAf,KAAsB,QAA1B,EAAoC;AAChCf,YAAAA,OAAO,CAACI,KAAR,CAAe,6CAA4CtB,OAAO,CAACJ,IAAR,CAAa6B,KAAM,EAAhE,CAAkEH,KAAhF;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,YAAI;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAsCnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAAxD,CAA0DL,OAAtE;AACAN,UAAAA,GAAG,GAAG,MAAMD,GAAG,CAACQ,IAAJ,CAASrB,OAAO,CAACiC,EAAjB,CAAZ;AACAf,UAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA/C,CAAiDL,OAA7D;AACH,SAJD,CAIE,OAAOE,KAAP,EAAc;AACZ,cAAIA,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAezB,IAArC,EAA2C;AACvC,gBAAIU,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoB0B,OAApB,KAAgC,WAApC,EAAiD;AAC7CpB,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBQ,IAAjC;AACH,aAFD,MAEO;AACHT,cAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA/C,CAAiDH,KAA7D;AACAJ,cAAAA,OAAO,CAACI,KAAR,CAAcA,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoBU,KAAlC;AACAC,cAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ,WARD,MAQO;AACHN,YAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA/C,CAAiDH,KAA7D;AACAJ,YAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,YAAI;AACAb,UAAAA,SAAS,GAAG,MAAMiB,aAAWW,gBAAX,CAA4BvC,OAAO,CAACiC,EAApC,EAAwC1B,MAAxC,CAAlB;AACA,gBAAMiC,OAAO,CAACC,GAAR,CAAY9B,SAAS,CAAC+B,GAAV,CAAcC,QAAQ,IAAIf,aAAWgB,SAAX,CAAqBD,QAArB,CAA1B,CAAZ,CAAN;AACAzB,UAAAA,OAAO,CAACC,GAAR,CAAa,0CAAD,CAA2CQ,IAAvD,EAA6DhB,SAA7D;AACH,SAJD,CAIE,OAAOW,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAa,oDAAD,CAAqDG,KAAjE;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAa,0CAAyCnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,UAAS,YAAYU,MAAO,gCAAvF,CAAuHL,IAAnI;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAa,kDAAD,CAAmDY,IAA/D;AACAb,UAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AACD;;AAEJ,WAAK,KAAL;AACIX,QAAAA,GAAG,GAAG,IAAIgC,gBAAJ,CAAmB;AAAErC,UAAAA;AAAF,SAAnB,CAAN;;AACA,YAAI;AACAU,UAAAA,OAAO,CAACC,GAAR,CAAY,yCAAyCC,OAArD;AACAN,UAAAA,GAAG,GAAG,MAAMD,GAAG,CAACQ,IAAJ,EAAZ;AACAH,UAAAA,OAAO,CAAC4B,KAAR,CAAchC,GAAG,CAACF,IAAJ,CAASmC,IAAT,CAAcL,GAAd,CAAkBM,GAAG,IAAI;AACnC,kBAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAY5C,MAAM,CAAC0C,KAAnB,EAA0BG,MAA1B,CAAiCC,GAAG,IAAI;AAClD,qBAAO9C,MAAM,CAAC0C,KAAP,CAAaI,GAAb,MAAsBL,GAAG,CAACtB,MAAjC;AACH,aAFa,CAAd;AAIA,mBAAO;AACH,sBAAQuB,KAAK,CAACK,IAAN,CAAW,IAAX,CADL;AAEH,yBAAWN,GAAG,CAACtB,MAFZ;AAGH,sBAAQsB,GAAG,CAAChC,IAAJ,CAASf,IAHd;AAIH,qBAAO+C,GAAG,CAAChC,IAAJ,CAASC;AAJb,aAAP;AAMH,WAXa,CAAd;AAYH,SAfD,CAeE,OAAOK,KAAP,EAAc;AACZ,cAAIA,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAezB,IAArC,EAA2C;AACvC,gBAAIU,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoB0B,OAApB,KAAgC,SAApC,EAA+C;AAC3CpB,cAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBQ,IAAjC;AACAJ,cAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH,aAHD,MAGO;AACHN,cAAAA,OAAO,CAACI,KAAR,CAAcA,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoBU,KAAlC;AACAC,cAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ,WARD,MAQO;AACHN,YAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED;;AAEJ,WAAK,QAAL;AACIX,QAAAA,GAAG,GAAG,IAAI0C,mBAAJ,CAAsB;AAAE/C,UAAAA;AAAF,SAAtB,CAAN;;AACA,YAAI,CAACR,OAAO,CAACiC,EAAT,IAAe,CAACjC,OAAO,CAACJ,IAA5B,EAAkC;AAC9BsB,UAAAA,OAAO,CAACgB,IAAR,CAAc,WAAU,eAAeC,MAAO,kCAAjC,CAAmED,IAAhF;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyB,gBAAgBM,KAAM,OAAM,oBAAoBA,KAAM,EAAhF,CAAkFK,IAA9F;AACAP,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED,YAAI,CAACxB,OAAO,CAACiC,EAAb,EAAiB;AACbjC,UAAAA,OAAO,CAACiC,EAAR,GAAa,MAAML,aAAWQ,eAAX,CAA2BpC,OAAO,CAACJ,IAAnC,EAAyCW,MAAzC,CAAnB;;AACA,cAAI,OAAOP,OAAO,CAACiC,EAAf,KAAsB,QAA1B,EAAoC;AAChCf,YAAAA,OAAO,CAACI,KAAR,CAAe,6CAA4CtB,OAAO,CAACJ,IAAR,CAAa6B,KAAM,EAAhE,CAAkEH,KAAhF;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AACD,YAAI,CAACxB,OAAO,CAACJ,IAAb,EAAmB;AACfI,UAAAA,OAAO,CAACJ,IAAR,GAAe,MAAMgC,aAAW4B,eAAX,CAA2BxD,OAAO,CAACiC,EAAnC,EAAuC1B,MAAvC,CAArB;;AACA,cAAI,OAAOP,OAAO,CAACJ,IAAf,KAAwB,QAA5B,EAAsC;AAClCsB,YAAAA,OAAO,CAACI,KAAR,CAAe,6CAA4CtB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA9D,CAAgEH,KAA9E;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,YAAI,CAACxB,OAAO,CAACC,IAAT,IAAiB,CAACD,OAAO,CAACiB,GAA9B,EAAmC;AAC/BC,UAAAA,OAAO,CAACgB,IAAR,CAAc,WAAU,eAAeC,MAAO,wDAAjC,CAAyFD,IAAtG;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0B,4BAA4BM,KAAM,EAA7D,CAA+DK,IAA3E;AACAP,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAEDZ,QAAAA,IAAI,GAAG;AACHX,UAAAA,IAAI,EAAED,OAAO,CAACC,IADX;AAEHgB,UAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFV,SAAP;;AAKA,YAAI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAsCnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAAxD,CAA0DL,OAAtE;AACAN,UAAAA,GAAG,GAAG,MAAMD,GAAG,CAACQ,IAAJ,CAASrB,OAAO,CAACiC,EAAjB,EAAqBrB,IAArB,CAAZ;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA/C,CAAiDL,OAA7D;AACH,SAJD,CAIE,OAAOE,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BnB,OAAO,CAACiC,EAAR,CAAWR,KAAM,EAA/C,CAAiDH,KAA7D;;AACA,cAAIA,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAezB,IAAjC,IAAyCU,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoB0B,OAAjE,EAA0E;AACtEpB,YAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACe,QAAN,CAAezB,IAAf,CAAoB0B,OAApB,CAA4BhB,KAAxC,EAA+CV,IAA/C;AACH,WAFD,MAEO;AACHM,YAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACH;;AACDC,UAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAED;;AAEJ;AApKJ;AAwKH,GA/KD;AAgLH,CAjLD,MAiLO,IAAI9B,SAAJ,EAAe;AAClB,UAAQA,SAAR;AACI,SAAK,MAAL;AACI+D,mBAAMC,IAAN,CAAWC,IAAI,CAACC,OAAL,CAAarC,OAAO,CAACsC,GAAR,EAAb,EAA4B,WAA5B,CAAX;;AACA;;AACJ,SAAK,SAAL;AACI3C,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAW2C,iBAAMC,OAAQ,EAAtC;AACA;;AACJ,SAAK,MAAL;AACA,YARJ,CASQ;;AATR;AAWH,CAZM,MAYA,IAAI/D,OAAO,CAAC+D,OAAZ,EAAqB;AACxB7C,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAW2C,iBAAMC,OAAQ,EAAtC;AACH","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as path from 'path';\nimport pjson from '../package.json';\nimport { LIFFAddRequest, LIFFConfig, LIFFDeleteRequest, LIFFGetRequest, LIFFUpdateRequest } from '.';\nimport { getValidatedConfig } from './shared';\nimport { FLIFF } from './fliff.js';\n\nconst commandLineArgs = require('command-line-args');\nconst { operation, _unknown } = commandLineArgs([\n    { name: 'operation', defaultOption: true }\n], { stopAtFirstUnknown: true });\nconst argv = _unknown || [];\nconst options = commandLineArgs([\n    { name: 'id', type: String },\n    { name: 'name', type: String },\n    { name: 'type', type: String },\n    { name: 'url', type: String },\n    { name: 'version', alias: 'v', type: Boolean }\n], { argv });\n\n// Commands that need Functions config\nif (['add', 'update', 'delete', 'get'].indexOf(operation) > -1) {\n    getValidatedConfig().then(async (config) => {\n        let accessToken = config.line.access_token;\n        let viewNames;\n        let data;\n        let req;\n        let res;\n\n        switch (operation) {\n            case 'add':\n                req = new LIFFAddRequest({ accessToken });\n                data = {\n                    view: {\n                        type: options.type,\n                        url: options.url\n                    }\n                };\n                try {\n                    console.log('Sending request to add LIFF view...'.verbose);\n                    res = await req.send(data);\n                } catch (error) {\n                    console.log(`Failed to add LIFF view`.error);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                try {\n                    console.log(`Created ${options.name.input} view with LIFF ID: ${res.data.liffId.info}`.verbose);\n                    await LIFFConfig.setView(options.name, res.data.liffId);\n                } catch (error) {\n                    console.log(`Failed to set Functions configuration`.error);\n                    console.log(`Try re-run with the following command`.help);\n                    console.log(`firebase functions:config:set views.${options.name}=${res.data.liffId}`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                break;\n\n            case 'delete':\n                req = new LIFFDeleteRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run ${'fliff delete --id <liffId>'.input} OR  ${'fliff delete --name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (options.name) {\n                    options.id = await LIFFConfig.getViewIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    console.log(`Sending request to delete LIFF view ${options.id.input}`.verbose);\n                    res = await req.send(options.id);\n                    console.log(`Deleted view with LIFF ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'not found') {\n                            console.log('LIFF app not found'.info);\n                        } else {\n                            console.log(`Failed to delete LIFF view ${options.id.input}`.error);\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.log(`Failed to delete LIFF view ${options.id.input}`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    viewNames = await LIFFConfig.getViewNamesById(options.id, config);\n                    await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n                    console.log(`Unset view(s) in Functions configuration`.info, viewNames);\n                } catch (error) {\n                    console.log(`Failed to unset view(s) in Functions configuration`.error);\n                    console.log(`Try looking for view name with LIFF ID ${options.id.input} using ${'fliff get'.prompt} command and unset it manually`.help);\n                    console.log(`firebase functions:config:unset views.<viewName>`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n                break;\n\n            case 'get':\n                req = new LIFFGetRequest({ accessToken });\n                try {\n                    console.log('Sending request to get LIFF view(s)...'.verbose);\n                    res = await req.send();\n                    console.table(res.data.apps.map(app => {\n                        const views = Object.keys(config.views).filter(key => {\n                            return config.views[key] === app.liffId;\n                        });\n\n                        return {\n                            'View': views.join(', '),\n                            'LIFF ID': app.liffId,\n                            'Type': app.view.type,\n                            'URL': app.view.url\n                        };\n                    }));\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'no apps') {\n                            console.log('LIFF app not found'.info);\n                            process.exit(0);\n                        } else {\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                break;\n\n            case 'update':\n                req = new LIFFUpdateRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'fliff update'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (!options.id) {\n                    options.id = await LIFFConfig.getViewIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n                if (!options.name) {\n                    options.name = await LIFFConfig.getViewNameById(options.id, config);\n                    if (typeof options.name !== 'string') {\n                        console.error(`Failed to retrieve view name with LIFF ID ${options.id.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                if (!options.type || !options.url) {\n                    console.warn(`Command ${'fliff update'.prompt} required both LIFF type AND url options to be updated`.warn);\n                    console.log(`Try re-run with options ${'--type <type> --url <url>'.input}`.help);\n                    process.exit(1);\n                }\n\n                data = {\n                    type: options.type,\n                    url: options.url\n                };\n\n                try {\n                    console.log(`Sending request to update LIFF view ${options.id.input}`.verbose);\n                    res = await req.send(options.id, data);\n                    console.log(`Updated view with LIFF ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    console.log(`Failed to update LIFF view ${options.id.input}`.error);\n                    if (error.response && error.response.data && error.response.data.message) {\n                        console.log(error.response.data.message.error, data);\n                    } else {\n                        console.error(error);\n                    }\n                    process.exit(1);\n                }\n\n                break;\n\n            default:\n\n        }\n\n    });\n} else if (operation) {\n    switch (operation) {\n        case 'init':\n            FLIFF.init(path.resolve(process.cwd(), 'web-views'));\n            break;\n        case 'version':\n            console.log(`Version: ${pjson.version}`);\n            break;\n        case 'help':\n        default:\n            // TODO: Display help message\n    }\n} else if (options.version) {\n    console.log(`Version: ${pjson.version}`);\n}\n"],"file":"fliff-cli.js"}