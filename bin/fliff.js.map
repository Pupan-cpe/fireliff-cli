{"version":3,"sources":["../lib/fliff.js"],"names":["copy","require","colors","setTheme","silly","input","verbose","prompt","info","data","help","warn","code","error","failedToRetrieveIdUsingName","failedToRetrieveNameUsingId","updateRequiredIdOrName","EOL","FLIFF","errorMessages","init","initPath","fbjsonPath","path","resolve","distPath","basename","errMakeDir","console","log","process","exit","__dirname","junk","dot","filter","errCopy","rsCopy","sort","a","b","dest","forEach","file","fbjson","hosting","public","message","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","installNow","toLowerCase","cmdInstall","cwd","stderr","on","toString","constructor","update","options","req","LIFFUpdateRequest","accessToken","FunctionsConfig","AccessToken","id","Promise","reject","LIFFConfig","getViewIdByName","config","getViewNameById","type","url","view","description","ble","features","send","response"],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\nimport * as colors from 'colors';\nimport { mkdir, existsSync } from 'fs';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport * as prompt from 'prompt';\nimport { FunctionsConfig } from './functions-config';\nimport { LIFFConfig } from './liff-config';\nimport { LIFFUpdateRequest } from './liff-update-request';\n\nconst copy = require('recursive-copy');\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    info: 'green',\n    data: 'white',\n    help: 'cyan',\n    warn: 'yellow',\n    code: 'blue',\n    error: 'red'\n});\n\nconst failedToRetrieveIdUsingName = `Failed to retrieve LIFF ID using view name`.error;\nconst failedToRetrieveNameUsingId = `Failed to retrieve view name using LIFF ID`.error;\nconst updateRequiredIdOrName = `Command ${'fliff update'.prompt} required LIFF ID or name option`.warn + EOL +\n    `\\r\\nTry re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\n\nexport class FLIFF {\n\n    static get errorMessages() {\n        return {\n            failedToRetrieveIdUsingName,\n            failedToRetrieveNameUsingId,\n            updateRequiredIdOrName\n        };\n    }\n\n    static init(initPath) {\n        const fbjsonPath = path.resolve(initPath, '../firebase.json');\n        const distPath = `${path.basename(initPath)}/dist`;\n\n        mkdir(initPath, errMakeDir => {\n            if (errMakeDir) {\n                switch (errMakeDir.code) {\n                    case 'EEXIST':\n                        console.log(`${initPath} already exists`.error);\n                        console.log(`Please manually delete ${initPath} and try again`.help);\n                        break;\n                    default: console.error(errMakeDir);\n                }\n                process.exit(1);\n            }\n\n            copy(path.resolve(__dirname, '../templates/web-views'), initPath, {\n                junk: false,\n                dot: true,\n                filter: [\n                    '*',\n                    'src/**/*',\n                    '!.cache',\n                    '!package-lock.json',\n                    '!dist',\n                    '!node_modules'\n                ]\n            }, (errCopy, rsCopy) => {\n                if (errCopy) {\n                    console.error(errMakeDir);\n                    process.exit(1);\n                }\n\n                console.log('Generated files'.info);\n                rsCopy.sort((a, b) => (a.dest > b.dest) ? 1 : ((b.dest > a.dest) ? -1 : 0));\n                rsCopy.forEach(file => console.log(file.dest.verbose));\n\n                if (existsSync(fbjsonPath)) {\n                    const fbjson = require(fbjsonPath);\n\n                    if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                        console.log(`firebase.json currently set hosting.public to ${fbjson.hosting.public.error}`.warn);\n                        console.log(`Please change hosting.public to ${distPath.info}`.warn);\n                    }\n                }\n\n                prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n                prompt.start();\n                prompt.get([{\n                    name: 'installNow',\n                    message: 'Do you want to install node modules now? [yes/no]',\n                    validator: /y[es]*|n[o]?/,\n                    default: 'yes'\n                }], (errPrompt, rsPrompt) => {\n                    if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n                        const cmdInstall = spawn('npm', ['i', '--loglevel=error'], { cwd: initPath });\n                        console.log(`Installing node modules in ${initPath}. Please wait...`);\n                        cmdInstall.stderr.on('data', data => console.error(data.toString()));\n                        cmdInstall.on('exit', code => {\n                            if (code === 0) {\n                                console.log('Installed'.help);\n                            }\n                            process.exit(code);\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    constructor() {\n    }\n\n    async update(options) {\n        const req = new LIFFUpdateRequest({ accessToken: FunctionsConfig.AccessToken });\n        let data = {};\n\n        if (!options.id && !options.name) {\n            return Promise.reject(FLIFF.errorMessages.updateRequiredIdOrName);\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(FLIFF.errorMessages.failedToRetrieveIdUsingName);\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(FLIFF.errorMessages.failedToRetrieveNameUsingId);\n            }\n        }\n\n        if (options.type || options.url) {\n            data.view = {};\n            if (options.type) {\n                data.view.type = options.type;\n            }\n            if (options.url) {\n                data.view.url = options.url;\n            }\n        }\n\n        if (options.description) {\n            data.description = options.description;\n        }\n\n        if (options.ble) {\n            data.features = {\n                ble: (options.ble.toLowerCase() == 'false') ? false : true\n            };\n        }\n\n        try {\n            return await req.send(options.id, data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(error.response.data.message.error);\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n    }\n\n}\n"],"file":"fliff.js"}