{"version":3,"sources":["../lib/fliff.js"],"names":["AddRequiredNameAndUrl","prompt","warn","EOL","input","help","ConfigRequiredIdSecretOrName","error","DeleteRequiredIdOrName","FailedToAddLIFF","FailedToInitPathExists","initPath","FailedToRetrieveIdUsingName","FailedToRetrieveNameUsingId","FailedToSetView","FailedToUnsetViews","RevokeTokenRequiredAccessToken","IssueTokenRequiredChannelIdAndSecret","TokenRequiredIssueOrRevoke","UpdateRequiredIdOrName","WarnPublicHostingConfig","current","preferred","info","FLIFF","ErrorMessages","constructor","init","Promise","resolve","reject","fbjsonPath","path","distPath","basename","errMakeDir","code","FLIFFError","copy","require","__dirname","junk","dot","filter","errCopy","rsCopy","sort","a","b","dest","files","map","file","message","fbjson","hosting","public","installNow","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","toLowerCase","spawn","cmdInstall","cwd","console","log","stderr","on","data","toString","add","options","url","type","req","LIFFAddRequest","accessToken","FunctionsConfig","AccessToken","view","res","send","response","LIFFConfig","setView","liffId","config","result","id","secret","token","SingleChannelGroup","set","ChannelIdName","errId","ChannelSecretName","errSecret","AccessTokenName","errToken","issue","revoke","undefined","ChannelId","ChannelSecret","OAuthIssueTokenRequest","tokenData","status","access_token","expiresIn","expires_in","token_type","save","statusText","error_description","OAuthRevokeTokenRequest","delete","getViewIdByName","getViewNameById","LIFFDeleteRequest","viewNames","getViewNamesById","all","viewName","unsetView","update","description","ble","features","LIFFUpdateRequest","LIFFGetRequest","apps","app","views","Object","keys","key","join"],"mappings":"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","sourcesContent":["import { mkdir, existsSync } from 'fs';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport './colors-set-theme';\nimport { FLIFFError } from './fliff-error';\nimport { FunctionsConfig } from './functions-config';\nimport { LIFFConfig } from './liff-config';\nimport { LIFFAddRequest } from './liff-add-request';\nimport { LIFFDeleteRequest } from './liff-delete-request';\nimport { LIFFGetRequest } from './liff-get-request';\nimport { LIFFUpdateRequest } from './liff-update-request';\nimport { OAuthIssueTokenRequest } from './oauth-issue-token-request';\nimport { OAuthRevokeTokenRequest } from './oauth-revoke-token-request';\n\nconst AddRequiredNameAndUrl = `Command ${'fliff add'.prompt} required name and url options`.warn + EOL +\n    `Try re-run with option ${'--name <viewName>'.input} AND ${'--url <viewURL>'.input}`.help;\nconst ConfigRequiredIdSecretOrName = `Failed to configure channel. ${'fliff config'.prompt} required id, secret or token options.`.error + EOL +\n    `Try re-run with option ${'--id <channelId>'.input} OR ${'--secret <channelSecret>'.input} OR ${'--token <channelToken>'.input}`.help;\nconst DeleteRequiredIdOrName = `Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\nconst FailedToAddLIFF = `Failed to add LIFF view`.error;\nconst FailedToInitPathExists = (initPath) => `${initPath} already exists`.error + EOL + `Please manually delete ${initPath} and try again`.help;\nconst FailedToRetrieveIdUsingName = `Failed to retrieve LIFF ID using view name`.error;\nconst FailedToRetrieveNameUsingId = `Failed to retrieve view name using LIFF ID`.error;\nconst FailedToSetView = `Failed to set view in Functions configuration`.error;\nconst FailedToUnsetViews = `Failed to unset view(s) in Functions configuration`.error;\nconst RevokeTokenRequiredAccessToken = `Command ${'fliff token --revoke'.prompt} required access token.`.warn + EOL +\n    `Try re-run with access token ${'fliff token --revoke <accessToken>'.input}`.help;\nconst IssueTokenRequiredChannelIdAndSecret = `Command ${'fliff token'.prompt} required Channel ID and Secret to be configured first`.error + EOL +\n    `Try run ${'fliff config --id <channelId> --secret <channelSecret>'.input} to configure before re-run ${'fliff token'.prompt} again.`.help;\nconst TokenRequiredIssueOrRevoke = `Command ${'fliff token'.prompt} required issue or revoke options.`.error + EOL +\n    `Try re-run with option ${'--issue'.input} OR ${'--revoke'.input}`.help;\nconst UpdateRequiredIdOrName = `Command ${'fliff update'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\nconst WarnPublicHostingConfig = (current, preferred) => `firebase.json currently set hosting.public to ${current.error}`.warn + EOL + `Please change hosting.public to ${preferred.info}`.warn;\n\nexport class FLIFF {\n\n    static get ErrorMessages() {\n        return {\n            AddRequiredNameAndUrl,\n            ConfigRequiredIdSecretOrName,\n            DeleteRequiredIdOrName,\n            FailedToAddLIFF,\n            FailedToInitPathExists,\n            FailedToRetrieveIdUsingName,\n            FailedToRetrieveNameUsingId,\n            FailedToSetView,\n            FailedToUnsetViews,\n            RevokeTokenRequiredAccessToken,\n            IssueTokenRequiredChannelIdAndSecret,\n            TokenRequiredIssueOrRevoke,\n            UpdateRequiredIdOrName,\n            WarnPublicHostingConfig\n        };\n    }\n\n    constructor() {\n    }\n\n    init(initPath) {\n        return new Promise((resolve, reject) => {\n            const fbjsonPath = path.resolve(initPath, '../firebase.json');\n            const distPath = `${path.basename(initPath)}/dist`;\n\n            mkdir(initPath, errMakeDir => {\n                if (errMakeDir) {\n                    switch (errMakeDir.code) {\n                        case 'EEXIST':\n                            return reject(new FLIFFError(FLIFF.ErrorMessages.FailedToInitPathExists(initPath)));\n                        default:\n                            return reject(errMakeDir);\n                    }\n                }\n\n                const copy = require('recursive-copy');\n\n                copy(path.resolve(__dirname, '../templates/web-views'), initPath, {\n                    junk: false,\n                    dot: true,\n                    filter: [\n                        '*',\n                        'src/**/*',\n                        '!.cache',\n                        '!package-lock.json',\n                        '!dist',\n                        '!node_modules'\n                    ]\n                }, (errCopy, rsCopy) => {\n\n                    if (errCopy) {\n                        return reject(errCopy);\n                    }\n\n                    rsCopy.sort((a, b) => (a.dest > b.dest) ? 1 : ((b.dest > a.dest) ? -1 : 0));\n\n                    const files = rsCopy.map(file => file.dest);\n                    let message = '';\n\n                    if (existsSync(fbjsonPath)) {\n                        const fbjson = require(fbjsonPath);\n\n                        if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                            message = FLIFF.ErrorMessages.WarnPublicHostingConfig(fbjson.hosting.public, distPath);\n                        }\n                    }\n\n                    return resolve({ files, message });\n                });\n            });\n        });\n    }\n\n    installNow(initPath) {\n        return new Promise((resolve, reject) => {\n            this.prompt = require('prompt');\n\n            this.prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n            this.prompt.start();\n            this.prompt.get([{\n                name: 'installNow',\n                message: 'Do you want to install node modules now? [yes/no]',\n                validator: /y[es]*|n[o]?/,\n                default: 'yes'\n            }], (errPrompt, rsPrompt) => {\n                if (errPrompt) {\n                    return reject(errPrompt);\n                }\n\n                if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n                    const spawn = require('child_process').spawn;\n                    const cmdInstall = spawn('npm', ['i', '--loglevel=error'], { cwd: initPath });\n                    console.log(`Installing node modules in ${initPath}. Please wait...`);\n                    cmdInstall.stderr.on('data', data => reject(data.toString()));\n                    cmdInstall.on('exit', code => {\n                        if (code === 0) {\n                            return resolve(true);\n                        }\n                        return reject(code);\n                    });\n                }\n            });\n        });\n    }\n\n    async add(options) {\n\n        if (!options.name || !options.url) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.AddRequiredNameAndUrl));\n        }\n\n        if (!options.type) {\n            options.type = 'full';\n        }\n\n        const req = new LIFFAddRequest({ accessToken: FunctionsConfig.AccessToken });\n        const data = {\n            view: {\n                type: options.type,\n                url: options.url\n            }\n        };\n        let res;\n\n        try {\n            res = await req.send(data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(new FLIFFError(error.response.data.message.error));\n            } else {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToAddLIFF));\n            }\n        }\n\n        try {\n            return await LIFFConfig.setView(options.name, res.data.liffId);\n        } catch (error) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToSetView));\n        }\n    }\n\n    async config(options) {\n        let result = {};\n\n        if (!options.id && !options.secret && !options.token) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.ConfigRequiredIdSecretOrName));\n        } else {\n            result[FunctionsConfig.SingleChannelGroup] = {};\n        }\n\n        if (options.id) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelIdName}`, options.id);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelIdName] = options.id;\n            } catch (errId) {\n                return Promise.reject(errId);\n            }\n        }\n\n        if (options.secret) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelSecretName}`, options.secret);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelSecretName] = options.secret;\n            } catch (errSecret) {\n                return Promise.reject(errSecret);\n            }\n        }\n\n        if (options.token) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, options.token);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.AccessTokenName] = options.token;\n            } catch (errToken) {\n                return Promise.reject(errToken);\n            }\n        }\n\n        return result;\n    }\n\n    async token(options) {\n\n        if (!options.issue && options.revoke === undefined) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.TokenRequiredIssueOrRevoke));\n        }\n\n        if (options.issue === true) {\n\n            if (!FunctionsConfig.ChannelId || !FunctionsConfig.ChannelSecret) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.IssueTokenRequiredChannelIdAndSecret));\n            }\n\n            try {\n                const req = new OAuthIssueTokenRequest();\n                const res = await req.send(FunctionsConfig.ChannelId, FunctionsConfig.ChannelSecret);\n                const tokenData = (res.status === 200) ? {\n                    accessToken: res.data.access_token,\n                    expiresIn: res.data.expires_in,\n                    type: res.data.token_type\n                } : false;\n\n                if (tokenData) {\n                    if (options.save === true) {\n                        await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, tokenData.accessToken);\n\n                        return tokenData;\n                    }\n\n                    return tokenData;\n                } else {\n                    return Promise.reject(new FLIFFError(res.statusText));\n                }\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        } else if (options.revoke !== undefined) {\n\n            if (options.revoke === null) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.RevokeTokenRequiredAccessToken));\n            }\n\n            try {\n                const req = new OAuthRevokeTokenRequest();\n                const res = await req.send(options.revoke);\n\n                return (res.status === 200) ? true : Promise.reject(new FLIFFError(res.statusText));\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        }\n\n    }\n\n\n    async delete(options) {\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.DeleteRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        try {\n            const req = new LIFFDeleteRequest({ accessToken: FunctionsConfig.AccessToken });\n            await req.send(options.id);\n        } catch (error) {\n            if (error.response && error.response.data) {\n                if (error.response.data.message !== 'not found') {\n                    return Promise.reject(error.response.data.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n        try {\n            const viewNames = await LIFFConfig.getViewNamesById(options.id, FunctionsConfig.config);\n            await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n\n            return viewNames;\n        } catch (error) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToUnsetViews));\n        }\n\n    }\n\n    async update(options) {\n        let data = {};\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.UpdateRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        if (options.type || options.url) {\n            data.view = {};\n            if (options.type) {\n                data.view.type = options.type;\n            }\n            if (options.url) {\n                data.view.url = options.url;\n            }\n        }\n\n        if (options.description) {\n            data.description = options.description;\n        }\n\n        if (options.ble) {\n            data.features = {\n                ble: (options.ble.toLowerCase() == 'false') ? false : true\n            };\n        }\n\n        try {\n            const req = new LIFFUpdateRequest({ accessToken: FunctionsConfig.AccessToken });\n\n            return await req.send(options.id, data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(error.response.data.message.error);\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n    }\n\n    async get() {\n        try {\n            const req = new LIFFGetRequest({ accessToken: FunctionsConfig.AccessToken });\n            const res = await req.send();\n\n            return res.data.apps.map(app => {\n                const views = Object.keys(FunctionsConfig.config.views).filter(key => {\n                    return FunctionsConfig.config.views[key] === app.liffId;\n                });\n\n                return {\n                    'View': views.join(', '),\n                    'LIFF ID': app.liffId,\n                    'Type': app.view.type,\n                    'URL': app.view.url\n                };\n            });\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                if (error.response.data.message === 'no apps') {\n                    return 'LIFF app not found'.info;\n                } else {\n                    return Promise.reject(error.response.data.message.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n    }\n\n}\n"],"file":"fliff.js"}