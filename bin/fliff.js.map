{"version":3,"sources":["../lib/fliff.js"],"names":["copy","require","colors","setTheme","silly","input","verbose","prompt","info","data","help","warn","code","error","FLIFF","init","initPath","fbjsonPath","path","resolve","distPath","basename","errMakeDir","console","log","process","exit","__dirname","junk","dot","filter","errCopy","rsCopy","sort","a","b","dest","forEach","file","fbjson","hosting","public","message","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","installNow","toLowerCase","cmdInstall","cwd","stderr","on","toString"],"mappings":"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","sourcesContent":["import * as colors from 'colors';\nimport { mkdir, existsSync } from 'fs';\nimport * as path from 'path';\nimport * as prompt from 'prompt';\nimport { spawn } from 'child_process';\n\nconst copy = require('recursive-copy');\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    info: 'green',\n    data: 'white',\n    help: 'cyan',\n    warn: 'yellow',\n    code: 'blue',\n    error: 'red'\n});\n\nexport class FLIFF {\n    static init(initPath) {\n        const fbjsonPath = path.resolve(initPath, '../firebase.json');\n        const distPath = `${path.basename(initPath)}/dist`;\n\n        mkdir(initPath, errMakeDir => {\n            if (errMakeDir) {\n                switch (errMakeDir.code) {\n                    case 'EEXIST':\n                        console.log(`${initPath} already exists`.error);\n                        console.log(`Please manually delete ${initPath} and try again`.help);\n                        break;\n                    default: console.error(errMakeDir);\n                }\n                process.exit(1);\n            }\n\n            copy(path.resolve(__dirname, '../templates/web-views'), initPath, {\n                junk: false,\n                dot: true,\n                filter: [\n                    '*',\n                    'src/**/*',\n                    '!.cache',\n                    '!package-lock.json',\n                    '!dist',\n                    '!node_modules'\n                ]\n            }, (errCopy, rsCopy) => {\n                if (errCopy) {\n                    console.error(errMakeDir);\n                    process.exit(1);\n                }\n\n                console.log('Generated files'.info);\n                rsCopy.sort((a, b) => (a.dest > b.dest) ? 1 : ((b.dest > a.dest) ? -1 : 0));\n                rsCopy.forEach(file => console.log(file.dest.verbose));\n\n                if (existsSync(fbjsonPath)) {\n                    const fbjson = require(fbjsonPath);\n\n                    if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                        console.log(`firebase.json currently set hosting.public to ${fbjson.hosting.public.error}`.warn);\n                        console.log(`Please change hosting.public to ${distPath.info}`.warn);\n                    }\n                }\n\n                prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n                prompt.start();\n                prompt.get([{\n                    name: 'installNow',\n                    message: 'Do you want to install node modules now? [yes/no]',\n                    validator: /y[es]*|n[o]?/,\n                    default: 'yes'\n                }], (errPrompt, rsPrompt) => {\n                    if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n                        const cmdInstall = spawn('npm', ['i', '--loglevel=error'], { cwd: initPath });\n                        console.log(`Installing node modules in ${initPath}. Please wait...`);\n                        cmdInstall.stderr.on('data', data => console.error(data.toString()));\n                        cmdInstall.on('exit', code => {\n                            if (code === 0) {\n                                console.log('Installed'.help);\n                            }\n                            process.exit(code);\n                        });\n                    }\n                });\n            });\n        });\n    }\n}\n"],"file":"fliff.js"}