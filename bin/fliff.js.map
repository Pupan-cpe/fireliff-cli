{"version":3,"sources":["../lib/fliff.js"],"names":["copy","require","ConfigRequiredIdSecretOrName","prompt","error","EOL","input","help","DeleteRequiredIdOrName","warn","FailedToRetrieveIdUsingName","FailedToRetrieveNameUsingId","FailedToUnsetViews","RevokeTokenRequiredAccessToken","IssueTokenRequiredChannelIdAndSecret","TokenRequiredIssueOrRevoke","UpdateRequiredIdOrName","FLIFF","ErrorMessages","init","initPath","fbjsonPath","path","resolve","distPath","basename","errMakeDir","code","console","log","process","exit","__dirname","junk","dot","filter","errCopy","rsCopy","info","sort","a","b","dest","forEach","file","verbose","fbjson","hosting","public","message","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","installNow","toLowerCase","cmdInstall","cwd","stderr","on","data","toString","constructor","config","options","result","id","secret","token","Promise","reject","FLIFFError","FunctionsConfig","SingleChannelGroup","set","ChannelIdName","errId","ChannelSecretName","errSecret","AccessTokenName","errToken","issue","revoke","undefined","ChannelId","ChannelSecret","req","OAuthIssueTokenRequest","res","send","tokenData","status","accessToken","access_token","expiresIn","expires_in","type","token_type","save","statusText","response","error_description","OAuthRevokeTokenRequest","delete","LIFFDeleteRequest","AccessToken","LIFFConfig","getViewIdByName","getViewNameById","viewNames","getViewNamesById","all","map","viewName","unsetView","update","LIFFUpdateRequest","url","view","description","ble","features","LIFFGetRequest","apps","app","views","Object","keys","key","liffId","join"],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\nimport { mkdir, existsSync } from 'fs';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport * as prompt from 'prompt';\nimport './colors-set-theme';\nimport { FLIFFError } from './fliff-error';\nimport { FunctionsConfig } from './functions-config';\nimport { LIFFConfig } from './liff-config';\nimport { LIFFDeleteRequest } from './liff-delete-request';\nimport { LIFFGetRequest } from './liff-get-request';\nimport { LIFFUpdateRequest } from './liff-update-request';\nimport { OAuthIssueTokenRequest } from './oauth-issue-token-request';\nimport { OAuthRevokeTokenRequest } from './oauth-revoke-token-request';\n\nconst copy = require('recursive-copy');\n\nconst ConfigRequiredIdSecretOrName = `Failed to configure channel. ${'fliff config'.prompt} required id, secret or token options.`.error + EOL +\n    `Try re-run with option ${'--id <channelId>'.input} OR ${'--secret <channelSecret>'.input} OR ${'--token <channelToken>'.input}`.help;\nconst DeleteRequiredIdOrName = `Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\nconst FailedToRetrieveIdUsingName = `Failed to retrieve LIFF ID using view name`.error;\nconst FailedToRetrieveNameUsingId = `Failed to retrieve view name using LIFF ID`.error;\nconst FailedToUnsetViews = `Failed to unset view(s) in Functions configuration`.error;\nconst RevokeTokenRequiredAccessToken = `Command ${'fliff token --revoke'.prompt} required access token.`.warn + EOL +\n    `Try re-run with access token ${'fliff token --revoke <accessToken>'.input}`.help;\nconst IssueTokenRequiredChannelIdAndSecret = `Command ${'fliff token'.prompt} required Channel ID and Secret to be configured first`.error + EOL +\n    `Try run ${'fliff config --id <channelId> --secret <channelSecret>'.input} to configure before re-run ${'fliff token'.prompt} again.`.help;\nconst TokenRequiredIssueOrRevoke = `Command ${'fliff token'.prompt} required issue or revoke options.`.error + EOL +\n    `Try re-run with option ${'--issue'.input} OR ${'--revoke'.input}`.help;\nconst UpdateRequiredIdOrName = `Command ${'fliff update'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\n\nexport class FLIFF {\n\n    static get ErrorMessages() {\n        return {\n            ConfigRequiredIdSecretOrName,\n            DeleteRequiredIdOrName,\n            FailedToRetrieveIdUsingName,\n            FailedToRetrieveNameUsingId,\n            FailedToUnsetViews,\n            RevokeTokenRequiredAccessToken,\n            IssueTokenRequiredChannelIdAndSecret,\n            TokenRequiredIssueOrRevoke,\n            UpdateRequiredIdOrName\n        };\n    }\n\n    static init(initPath) {\n        const fbjsonPath = path.resolve(initPath, '../firebase.json');\n        const distPath = `${path.basename(initPath)}/dist`;\n\n        mkdir(initPath, errMakeDir => {\n            if (errMakeDir) {\n                switch (errMakeDir.code) {\n                    case 'EEXIST':\n                        console.log(`${initPath} already exists`.error);\n                        console.log(`Please manually delete ${initPath} and try again`.help);\n                        break;\n                    default: console.error(errMakeDir);\n                }\n                process.exit(1);\n            }\n\n            copy(path.resolve(__dirname, '../templates/web-views'), initPath, {\n                junk: false,\n                dot: true,\n                filter: [\n                    '*',\n                    'src/**/*',\n                    '!.cache',\n                    '!package-lock.json',\n                    '!dist',\n                    '!node_modules'\n                ]\n            }, (errCopy, rsCopy) => {\n                if (errCopy) {\n                    console.error(errMakeDir);\n                    process.exit(1);\n                }\n\n                console.log('Generated files'.info);\n                rsCopy.sort((a, b) => (a.dest > b.dest) ? 1 : ((b.dest > a.dest) ? -1 : 0));\n                rsCopy.forEach(file => console.log(file.dest.verbose));\n\n                if (existsSync(fbjsonPath)) {\n                    const fbjson = require(fbjsonPath);\n\n                    if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                        console.log(`firebase.json currently set hosting.public to ${fbjson.hosting.public.error}`.warn);\n                        console.log(`Please change hosting.public to ${distPath.info}`.warn);\n                    }\n                }\n\n                prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n                prompt.start();\n                prompt.get([{\n                    name: 'installNow',\n                    message: 'Do you want to install node modules now? [yes/no]',\n                    validator: /y[es]*|n[o]?/,\n                    default: 'yes'\n                }], (errPrompt, rsPrompt) => {\n                    if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n                        const cmdInstall = spawn('npm', ['i', '--loglevel=error'], { cwd: initPath });\n                        console.log(`Installing node modules in ${initPath}. Please wait...`);\n                        cmdInstall.stderr.on('data', data => console.error(data.toString()));\n                        cmdInstall.on('exit', code => {\n                            if (code === 0) {\n                                console.log('Installed'.help);\n                            }\n                            process.exit(code);\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    constructor() {\n    }\n\n    async config(options) {\n        let result = {};\n\n        if (!options.id && !options.secret && !options.token) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.ConfigRequiredIdSecretOrName));\n        } else {\n            result[FunctionsConfig.SingleChannelGroup] = {};\n        }\n\n        if (options.id) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelIdName}`, options.id);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelIdName] = options.id;\n            } catch (errId) {\n                return Promise.reject(errId);\n            }\n        }\n\n        if (options.secret) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelSecretName}`, options.secret);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelSecretName] = options.secret;\n            } catch (errSecret) {\n                return Promise.reject(errSecret);\n            }\n        }\n\n        if (options.token) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, options.token);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.AccessTokenName] = options.token;\n            } catch (errToken) {\n                return Promise.reject(errToken);\n            }\n        }\n\n        return result;\n    }\n\n    async token(options) {\n\n        if (!options.issue && options.revoke === undefined) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.TokenRequiredIssueOrRevoke));\n        }\n\n        if (options.issue === true) {\n\n            if (!FunctionsConfig.ChannelId || !FunctionsConfig.ChannelSecret) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.IssueTokenRequiredChannelIdAndSecret));\n            }\n\n            try {\n                const req = new OAuthIssueTokenRequest();\n                const res = await req.send(FunctionsConfig.ChannelId, FunctionsConfig.ChannelSecret);\n                const tokenData = (res.status === 200) ? {\n                    accessToken: res.data.access_token,\n                    expiresIn: res.data.expires_in,\n                    type: res.data.token_type\n                } : false;\n\n                if (tokenData) {\n                    if (options.save === true) {\n                        await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, tokenData.accessToken);\n\n                        return tokenData;\n                    }\n\n                    return tokenData;\n                } else {\n                    return Promise.reject(new FLIFFError(res.statusText));\n                }\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        } else if (options.revoke !== undefined) {\n\n            if (options.revoke === null) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.RevokeTokenRequiredAccessToken));\n            }\n\n            try {\n                const req = new OAuthRevokeTokenRequest();\n                const res = await req.send(options.revoke);\n\n                return (res.status === 200) ? true : Promise.reject(new FLIFFError(res.statusText));\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        }\n\n    }\n\n\n    async delete(options) {\n        const req = new LIFFDeleteRequest({ accessToken: FunctionsConfig.AccessToken });\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.DeleteRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        try {\n            await req.send(options.id);\n        } catch (error) {\n            if (error.response && error.response.data) {\n                if (error.response.data.message !== 'not found') {\n                    return Promise.reject(error.response.data.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n        try {\n            const viewNames = await LIFFConfig.getViewNamesById(options.id, FunctionsConfig.config);\n            await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n            return viewNames;\n        } catch (error) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToUnsetViews));\n        }\n\n    }\n\n    async update(options) {\n        const req = new LIFFUpdateRequest({ accessToken: FunctionsConfig.AccessToken });\n        let data = {};\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.UpdateRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        if (options.type || options.url) {\n            data.view = {};\n            if (options.type) {\n                data.view.type = options.type;\n            }\n            if (options.url) {\n                data.view.url = options.url;\n            }\n        }\n\n        if (options.description) {\n            data.description = options.description;\n        }\n\n        if (options.ble) {\n            data.features = {\n                ble: (options.ble.toLowerCase() == 'false') ? false : true\n            };\n        }\n\n        try {\n            return await req.send(options.id, data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(error.response.data.message.error);\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n    }\n\n    async get() {\n        const req = new LIFFGetRequest({ accessToken: FunctionsConfig.AccessToken });\n\n        try {\n            const res = await req.send();\n\n            return res.data.apps.map(app => {\n                const views = Object.keys(FunctionsConfig.config.views).filter(key => {\n                    return FunctionsConfig.config.views[key] === app.liffId;\n                });\n\n                return {\n                    'View': views.join(', '),\n                    'LIFF ID': app.liffId,\n                    'Type': app.view.type,\n                    'URL': app.view.url\n                };\n            });\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                if (error.response.data.message === 'no apps') {\n                    return 'LIFF app not found'.info;\n                } else {\n                    return Promise.reject(error.response.data.message.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n    }\n\n}\n"],"file":"fliff.js"}