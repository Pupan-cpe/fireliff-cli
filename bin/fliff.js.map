{"version":3,"sources":["../lib/fliff.js"],"names":["copy","require","AddRequiredNameAndUrl","prompt","warn","EOL","input","help","ConfigRequiredIdSecretOrName","error","DeleteRequiredIdOrName","FailedToAddLIFF","FailedToRetrieveIdUsingName","FailedToRetrieveNameUsingId","FailedToSetView","FailedToUnsetViews","RevokeTokenRequiredAccessToken","IssueTokenRequiredChannelIdAndSecret","TokenRequiredIssueOrRevoke","UpdateRequiredIdOrName","FLIFF","ErrorMessages","init","initPath","fbjsonPath","path","resolve","distPath","basename","errMakeDir","code","console","log","process","exit","__dirname","junk","dot","filter","errCopy","rsCopy","info","sort","a","b","dest","forEach","file","verbose","fbjson","hosting","public","message","start","get","name","validator","default","errPrompt","rsPrompt","indexOf","installNow","toLowerCase","cmdInstall","cwd","stderr","on","data","toString","constructor","add","options","url","Promise","reject","FLIFFError","type","req","LIFFAddRequest","accessToken","FunctionsConfig","AccessToken","view","res","send","response","LIFFConfig","setView","liffId","config","result","id","secret","token","SingleChannelGroup","set","ChannelIdName","errId","ChannelSecretName","errSecret","AccessTokenName","errToken","issue","revoke","undefined","ChannelId","ChannelSecret","OAuthIssueTokenRequest","tokenData","status","access_token","expiresIn","expires_in","token_type","save","statusText","error_description","OAuthRevokeTokenRequest","delete","getViewIdByName","getViewNameById","LIFFDeleteRequest","viewNames","getViewNamesById","all","map","viewName","unsetView","update","description","ble","features","LIFFUpdateRequest","LIFFGetRequest","apps","app","views","Object","keys","key","join"],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\nimport { mkdir, existsSync, promises } from 'fs';\nimport { EOL } from 'os';\nimport * as path from 'path';\nimport * as prompt from 'prompt';\nimport './colors-set-theme';\nimport { FLIFFError } from './fliff-error';\nimport { FunctionsConfig } from './functions-config';\nimport { LIFFConfig } from './liff-config';\nimport { LIFFAddRequest } from './liff-add-request';\nimport { LIFFDeleteRequest } from './liff-delete-request';\nimport { LIFFGetRequest } from './liff-get-request';\nimport { LIFFUpdateRequest } from './liff-update-request';\nimport { OAuthIssueTokenRequest } from './oauth-issue-token-request';\nimport { OAuthRevokeTokenRequest } from './oauth-revoke-token-request';\n\nconst copy = require('recursive-copy');\n\nconst AddRequiredNameAndUrl = `Command ${'fliff add'.prompt} required name and url options`.warn + EOL +\n    `Try re-run with option ${'--name <viewName>'.input} AND ${'--url <viewURL>'.input}`.help;\nconst ConfigRequiredIdSecretOrName = `Failed to configure channel. ${'fliff config'.prompt} required id, secret or token options.`.error + EOL +\n    `Try re-run with option ${'--id <channelId>'.input} OR ${'--secret <channelSecret>'.input} OR ${'--token <channelToken>'.input}`.help;\nconst DeleteRequiredIdOrName = `Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\nconst FailedToAddLIFF = `Failed to add LIFF view`.error;\nconst FailedToRetrieveIdUsingName = `Failed to retrieve LIFF ID using view name`.error;\nconst FailedToRetrieveNameUsingId = `Failed to retrieve view name using LIFF ID`.error;\nconst FailedToSetView = `Failed to set view in Functions configuration`.error;\nconst FailedToUnsetViews = `Failed to unset view(s) in Functions configuration`.error;\nconst RevokeTokenRequiredAccessToken = `Command ${'fliff token --revoke'.prompt} required access token.`.warn + EOL +\n    `Try re-run with access token ${'fliff token --revoke <accessToken>'.input}`.help;\nconst IssueTokenRequiredChannelIdAndSecret = `Command ${'fliff token'.prompt} required Channel ID and Secret to be configured first`.error + EOL +\n    `Try run ${'fliff config --id <channelId> --secret <channelSecret>'.input} to configure before re-run ${'fliff token'.prompt} again.`.help;\nconst TokenRequiredIssueOrRevoke = `Command ${'fliff token'.prompt} required issue or revoke options.`.error + EOL +\n    `Try re-run with option ${'--issue'.input} OR ${'--revoke'.input}`.help;\nconst UpdateRequiredIdOrName = `Command ${'fliff update'.prompt} required LIFF ID or name option`.warn + EOL +\n    `Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help;\n\nexport class FLIFF {\n\n    static get ErrorMessages() {\n        return {\n            AddRequiredNameAndUrl,\n            ConfigRequiredIdSecretOrName,\n            DeleteRequiredIdOrName,\n            FailedToAddLIFF,\n            FailedToRetrieveIdUsingName,\n            FailedToRetrieveNameUsingId,\n            FailedToSetView,\n            FailedToUnsetViews,\n            RevokeTokenRequiredAccessToken,\n            IssueTokenRequiredChannelIdAndSecret,\n            TokenRequiredIssueOrRevoke,\n            UpdateRequiredIdOrName\n        };\n    }\n\n    static init(initPath) {\n        const fbjsonPath = path.resolve(initPath, '../firebase.json');\n        const distPath = `${path.basename(initPath)}/dist`;\n\n        mkdir(initPath, errMakeDir => {\n            if (errMakeDir) {\n                switch (errMakeDir.code) {\n                    case 'EEXIST':\n                        console.log(`${initPath} already exists`.error);\n                        console.log(`Please manually delete ${initPath} and try again`.help);\n                        break;\n                    default: console.error(errMakeDir);\n                }\n                process.exit(1);\n            }\n\n            copy(path.resolve(__dirname, '../templates/web-views'), initPath, {\n                junk: false,\n                dot: true,\n                filter: [\n                    '*',\n                    'src/**/*',\n                    '!.cache',\n                    '!package-lock.json',\n                    '!dist',\n                    '!node_modules'\n                ]\n            }, (errCopy, rsCopy) => {\n                if (errCopy) {\n                    console.error(errMakeDir);\n                    process.exit(1);\n                }\n\n                console.log('Generated files'.info);\n                rsCopy.sort((a, b) => (a.dest > b.dest) ? 1 : ((b.dest > a.dest) ? -1 : 0));\n                rsCopy.forEach(file => console.log(file.dest.verbose));\n\n                if (existsSync(fbjsonPath)) {\n                    const fbjson = require(fbjsonPath);\n\n                    if (fbjson.hosting && fbjson.hosting.public !== distPath) {\n                        console.log(`firebase.json currently set hosting.public to ${fbjson.hosting.public.error}`.warn);\n                        console.log(`Please change hosting.public to ${distPath.info}`.warn);\n                    }\n                }\n\n                prompt.message = ''; // Workaround: Remove annoying prompt: prefix\n                prompt.start();\n                prompt.get([{\n                    name: 'installNow',\n                    message: 'Do you want to install node modules now? [yes/no]',\n                    validator: /y[es]*|n[o]?/,\n                    default: 'yes'\n                }], (errPrompt, rsPrompt) => {\n                    if (['yes', 'y'].indexOf(rsPrompt.installNow.toLowerCase()) > -1) {\n                        const cmdInstall = spawn('npm', ['i', '--loglevel=error'], { cwd: initPath });\n                        console.log(`Installing node modules in ${initPath}. Please wait...`);\n                        cmdInstall.stderr.on('data', data => console.error(data.toString()));\n                        cmdInstall.on('exit', code => {\n                            if (code === 0) {\n                                console.log('Installed'.help);\n                            }\n                            process.exit(code);\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    constructor() {\n    }\n\n    async add(options) {\n\n        if (!options.name || !options.url) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.AddRequiredNameAndUrl));\n        }\n\n        if (!options.type) {\n            options.type = 'full';\n        }\n\n        const req = new LIFFAddRequest({ accessToken: FunctionsConfig.AccessToken });\n        const data = {\n            view: {\n                type: options.type,\n                url: options.url\n            }\n        };\n        let res;\n\n        try {\n            res = await req.send(data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(new FLIFFError(error.response.data.message.error));\n            } else {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToAddLIFF));\n            }\n        }\n\n        try {\n            return await LIFFConfig.setView(options.name, res.data.liffId);\n        } catch (error) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToSetView));\n        }\n    }\n\n    async config(options) {\n        let result = {};\n\n        if (!options.id && !options.secret && !options.token) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.ConfigRequiredIdSecretOrName));\n        } else {\n            result[FunctionsConfig.SingleChannelGroup] = {};\n        }\n\n        if (options.id) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelIdName}`, options.id);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelIdName] = options.id;\n            } catch (errId) {\n                return Promise.reject(errId);\n            }\n        }\n\n        if (options.secret) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.ChannelSecretName}`, options.secret);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelSecretName] = options.secret;\n            } catch (errSecret) {\n                return Promise.reject(errSecret);\n            }\n        }\n\n        if (options.token) {\n            try {\n                await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, options.token);\n                result[FunctionsConfig.SingleChannelGroup][FunctionsConfig.AccessTokenName] = options.token;\n            } catch (errToken) {\n                return Promise.reject(errToken);\n            }\n        }\n\n        return result;\n    }\n\n    async token(options) {\n\n        if (!options.issue && options.revoke === undefined) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.TokenRequiredIssueOrRevoke));\n        }\n\n        if (options.issue === true) {\n\n            if (!FunctionsConfig.ChannelId || !FunctionsConfig.ChannelSecret) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.IssueTokenRequiredChannelIdAndSecret));\n            }\n\n            try {\n                const req = new OAuthIssueTokenRequest();\n                const res = await req.send(FunctionsConfig.ChannelId, FunctionsConfig.ChannelSecret);\n                const tokenData = (res.status === 200) ? {\n                    accessToken: res.data.access_token,\n                    expiresIn: res.data.expires_in,\n                    type: res.data.token_type\n                } : false;\n\n                if (tokenData) {\n                    if (options.save === true) {\n                        await FunctionsConfig.set(`${FunctionsConfig.SingleChannelGroup}.${FunctionsConfig.AccessTokenName}`, tokenData.accessToken);\n\n                        return tokenData;\n                    }\n\n                    return tokenData;\n                } else {\n                    return Promise.reject(new FLIFFError(res.statusText));\n                }\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        } else if (options.revoke !== undefined) {\n\n            if (options.revoke === null) {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.RevokeTokenRequiredAccessToken));\n            }\n\n            try {\n                const req = new OAuthRevokeTokenRequest();\n                const res = await req.send(options.revoke);\n\n                return (res.status === 200) ? true : Promise.reject(new FLIFFError(res.statusText));\n            } catch (error) {\n                if (error.response && error.response.data && error.response.data.error_description) {\n                    return Promise.reject(error.response.data.error_description);\n                } else {\n                    return Promise.reject(error);\n                }\n            }\n\n        }\n\n    }\n\n\n    async delete(options) {\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.DeleteRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        try {\n            const req = new LIFFDeleteRequest({ accessToken: FunctionsConfig.AccessToken });\n            await req.send(options.id);\n        } catch (error) {\n            if (error.response && error.response.data) {\n                if (error.response.data.message !== 'not found') {\n                    return Promise.reject(error.response.data.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n        try {\n            const viewNames = await LIFFConfig.getViewNamesById(options.id, FunctionsConfig.config);\n            await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n\n            return viewNames;\n        } catch (error) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToUnsetViews));\n        }\n\n    }\n\n    async update(options) {\n        let data = {};\n\n        if (!options.id && !options.name) {\n            return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.UpdateRequiredIdOrName));\n        }\n\n        if (!options.id) {\n            options.id = await LIFFConfig.getViewIdByName(options.name, FunctionsConfig.config);\n            if (typeof options.id !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveIdUsingName));\n            }\n        }\n\n        if (!options.name) {\n            options.name = await LIFFConfig.getViewNameById(options.id, FunctionsConfig.config);\n            if (typeof options.name !== 'string') {\n                return Promise.reject(new FLIFFError(FLIFF.ErrorMessages.FailedToRetrieveNameUsingId));\n            }\n        }\n\n        if (options.type || options.url) {\n            data.view = {};\n            if (options.type) {\n                data.view.type = options.type;\n            }\n            if (options.url) {\n                data.view.url = options.url;\n            }\n        }\n\n        if (options.description) {\n            data.description = options.description;\n        }\n\n        if (options.ble) {\n            data.features = {\n                ble: (options.ble.toLowerCase() == 'false') ? false : true\n            };\n        }\n\n        try {\n            const req = new LIFFUpdateRequest({ accessToken: FunctionsConfig.AccessToken });\n\n            return await req.send(options.id, data);\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                return Promise.reject(error.response.data.message.error);\n            } else {\n                return Promise.reject(error);\n            }\n        }\n\n    }\n\n    async get() {\n        try {\n            const req = new LIFFGetRequest({ accessToken: FunctionsConfig.AccessToken });\n            const res = await req.send();\n\n            return res.data.apps.map(app => {\n                const views = Object.keys(FunctionsConfig.config.views).filter(key => {\n                    return FunctionsConfig.config.views[key] === app.liffId;\n                });\n\n                return {\n                    'View': views.join(', '),\n                    'LIFF ID': app.liffId,\n                    'Type': app.view.type,\n                    'URL': app.view.url\n                };\n            });\n        } catch (error) {\n            if (error.response && error.response.data && error.response.data.message) {\n                if (error.response.data.message === 'no apps') {\n                    return 'LIFF app not found'.info;\n                } else {\n                    return Promise.reject(error.response.data.message.error);\n                }\n            } else {\n                return Promise.reject(error);\n            }\n        }\n    }\n\n}\n"],"file":"fliff.js"}