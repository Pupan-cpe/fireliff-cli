{"version":3,"sources":["../lib/shared.js"],"names":["getValidatedConfig","console","log","verbose","config","FunctionsConfig","reload","line","access_token","help","code","prompt","process","exit","error","commandErrorHandler","name","optionName","input","toString"],"mappings":";;;;;;;;AAAA;;AAEO,eAAeA,kBAAf,GAAoC;AACvC,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCC,OAAnD;AACA,QAAIC,MAAM,GAAG,MAAMC,iCAAgBC,MAAhB,EAAnB;;AACA,QAAI,CAACF,MAAM,CAACG,IAAR,IAAgB,CAACH,MAAM,CAACG,IAAP,CAAYC,YAAjC,EAA+C;AAC3CP,MAAAA,OAAO,CAACC,GAAR,CAAY,uDAAuDO,IAAnE;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,yEAAyEO,IAArF;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAE,mDAAmDQ,IAAK,GAAE,uBAAuBC,MAAO,EAAvG;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AACD,WAAOT,MAAP;AACH,GAVD,CAUE,OAAOU,KAAP,EAAc;AACZb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAF,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAEM,SAASE,mBAAT,CAA6BD,KAA7B,EAAoC;AACvC,UAAQA,KAAK,CAACE,IAAd;AACI,SAAK,gBAAL;AACIf,MAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBY,KAAK,CAACG,UAAN,CAAiBC,KAAM,EAAzC,CAA2CJ,KAAvD;AACAF,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;;AACJ;AACIZ,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAK,CAACK,QAAN,GAAiBL,KAA7B;AACAF,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AAPR;AASH","sourcesContent":["import { FunctionsConfig } from './functions-config';\n\nexport async function getValidatedConfig() {\n    try {\n        console.log('Get Firebase Functions configuration'.verbose);\n        let config = await FunctionsConfig.reload();\n        if (!config.line || !config.line.access_token) {\n            console.log('Functions configuration not found: line.access_token'.help);\n            console.log('Find your LINE channel access token and use with the following command'.help);\n            console.log(`${'firebase functions:config:set line.access_token='.code}${'<channelAccessToken>'.prompt}`);\n            process.exit(1);\n        }\n        return config;\n    } catch (error) {\n        console.log(error);\n        process.exit(1);\n    }\n}\n\nexport function commandErrorHandler(error) {\n    switch (error.name) {\n        case 'UNKNOWN_OPTION':\n            console.log(`Unknown option ${error.optionName.input}`.error);\n            process.exit(1);\n            break;\n        default:\n            console.log(error.toString().error);\n            process.exit(1);\n    }\n}\n"],"file":"shared.js"}