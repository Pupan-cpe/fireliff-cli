{"version":3,"sources":["../lib/functions-config.js"],"names":["FunctionsConfig","AccessToken","config","SingleChannelGroup","AccessTokenName","get","name","Promise","resolve","reject","command","ChildProcess","exec","error","output","parseConfigError","JSON","parse","jsonParseError","getNamesById","group","id","names","push","getIdByName","prop","parseName","toLowerCase","replace","errorText","errorMessage","EOL","info","test","verbose","code","set","value","reload","then","unset"],"mappings":"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","sourcesContent":["import * as ChildProcess from 'child_process';\nimport { EOL } from 'os';\n\n/**\n * FunctionsConfig handle configuration in Firebase Functions\n */\nexport class FunctionsConfig {\n\n    static SingleChannelGroup = 'line';\n\n    static AccessTokenName = 'access_token';\n\n    static get AccessToken() {\n        return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][FunctionsConfig.AccessTokenName];\n    }\n\n    static async get(name) {\n        return new Promise((resolve, reject) => {\n            let command = `firebase functions:config:get`;\n\n            if (name) {\n                command = `${command} ${name}`;\n            }\n\n            ChildProcess.exec(command, (error, output) => {\n                if (error) {\n                    return reject(FunctionsConfig.parseConfigError(error));\n                }\n\n                try {\n                    let config = JSON.parse(output);\n                    return resolve(config);\n                } catch (jsonParseError) {\n                    return reject(jsonParseError);\n                }\n            });\n        });\n    }\n\n    static async getNamesById(group, id, config) {\n        const names = [];\n\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let name in config[group]) {\n                if (config[group][name] === id) {\n                    names.push(name);\n                }\n            }\n        }\n\n        return names;\n    }\n\n    static async getIdByName(group, name, config) {\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let prop in config[group]) {\n                if (prop === name) {\n                    return config[group][prop];\n                }\n            }\n        }\n        return null;\n    }\n\n    static parseName(name) {\n        return name.toLowerCase().replace(/\\s/g, '_');\n    }\n\n    static parseConfigError(errorText) {\n        let errorMessage = 'Failed to get configuration'.error + EOL + 'Suggestions:'.info + EOL;\n\n        if (/Authentication Error/.test(errorText)) {\n            return errorMessage + 'Your credentials are no longer valid. Please run firebase login --reauth'.verbose;\n        } else {\n            return errorMessage + `Run ${'firebase init'.code} to start a project directory in the current folder.`.verbose + EOL +\n                `Run ${'firebase use --add'.code} to set active project.`.verbose;\n        }\n    }\n\n    static async set(name, value) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`firebase functions:config:set ${name}=${value}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(value);\n            });\n        });\n    }\n\n    static reload() {\n        return FunctionsConfig.get().then(config => FunctionsConfig.config = config);\n    }\n\n    static async unset(name) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`firebase functions:config:unset ${name}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(name);\n            });\n        });\n    }\n\n}\n"],"file":"functions-config.js"}