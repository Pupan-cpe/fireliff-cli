{"version":3,"sources":["../lib/functions-config.js"],"names":["FailedToGetConfig","error","FailedToGetConfigAuthError","info","verbose","join","EOL","FailedToGetConfigUnknownError","code","FunctionsConfig","AccessToken","config","SingleChannelGroup","AccessTokenName","BaseCommand","ChannelId","ChannelIdName","ChannelSecret","ChannelSecretName","ErrorMessages","get","name","Promise","resolve","reject","command","ChildProcess","exec","output","parseGetConfigError","JSON","parse","jsonParseError","getIdByName","group","prop","getNamesById","id","names","push","errorMessage","Error","message","test","FunctionsConfigError","parseName","toLowerCase","replace","reload","then","set","value","unset"],"mappings":"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","sourcesContent":["import * as ChildProcess from 'child_process';\nimport { EOL } from 'os';\nimport './colors-set-theme';\nimport { FunctionsConfigError } from './functions-config-error';\n\nconst FailedToGetConfig = 'Failed to get configuration'.error;\nconst FailedToGetConfigAuthError = [\n    FailedToGetConfig,\n    'Suggestions:'.info,\n    'Your credentials are no longer valid. Please run firebase login --reauth'.verbose\n].join(EOL);\nconst FailedToGetConfigUnknownError = [\n    FailedToGetConfig,\n    'Suggestions:'.info,\n    `Run ${'firebase init'.code} to start a project directory in the current folder.`.verbose,\n    `Run ${'firebase use --add'.code} to set active project.`.verbose\n].join(EOL);\n\n/**\n * FunctionsConfig handle configuration in Firebase Functions\n */\nexport class FunctionsConfig {\n\n    //\n    // Read-only\n    //\n    static get AccessToken() {\n        return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][FunctionsConfig.AccessTokenName];\n    }\n\n    static get AccessTokenName() {\n        return 'access_token';\n    }\n\n    static get BaseCommand() {\n        return 'firebase functions:config';\n    }\n\n    static get ChannelId() {\n        return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelIdName];\n    }\n\n    static get ChannelSecret() {\n        return FunctionsConfig.config[FunctionsConfig.SingleChannelGroup][FunctionsConfig.ChannelSecretName];\n    }\n\n    static get ChannelIdName() {\n        return 'channel_id';\n    }\n\n    static get ChannelSecretName() {\n        return 'channel_secret';\n    }\n\n    static get ErrorMessages() {\n        return {\n            FailedToGetConfig, FailedToGetConfigAuthError, FailedToGetConfigUnknownError\n        };\n    }\n\n    static get SingleChannelGroup() {\n        return 'line';\n    }\n\n    //\n    // Methods\n    //\n    static async get(name) {\n        return new Promise((resolve, reject) => {\n            let command = `${FunctionsConfig.BaseCommand}:get`;\n\n            if (name) {\n                command = `${command} ${name}`;\n            }\n\n            ChildProcess.exec(command, (error, output) => {\n                if (error) {\n                    return reject(FunctionsConfig.parseGetConfigError(error));\n                }\n\n                try {\n                    let config = JSON.parse(output);\n                    return resolve(config);\n                } catch (jsonParseError) {\n                    return reject(jsonParseError);\n                }\n            });\n        });\n    }\n\n    /**\n     * Find value (id) of a property in a group\n     * \n     * @param {string} group \n     * @param {string} name \n     * @param {*} config \n     */\n    static async getIdByName(group, name, config) {\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let prop in config[group]) {\n                if (prop === name) {\n                    return config[group][prop];\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Find properties in a group which their value matched id\n     * \n     * @param {string} group \n     * @param {string} id \n     * @param {*} config \n     */\n    static async getNamesById(group, id, config) {\n        const names = [];\n\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let name in config[group]) {\n                if (config[group][name] === id) {\n                    names.push(name);\n                }\n            }\n        }\n\n        return names;\n    }\n\n    /**\n     * \n     * @param {Error|string} error \n     * @return {string} error message intented to be used in console.log\n     */\n    static parseGetConfigError(error) {\n        let errorMessage = (error instanceof Error) ? error.message : error;\n\n        if (/Authentication Error/.test(errorMessage)) {\n            return new FunctionsConfigError(FunctionsConfig.ErrorMessages.FailedToGetConfigAuthError);\n        } else {\n            return new FunctionsConfigError(FunctionsConfig.ErrorMessages.FailedToGetConfigUnknownError);\n        }\n    }\n\n    /**\n     * \n     * @param {string} name\n     * @return {string} name in Firebase Functions Config acceptable format \n     */\n    static parseName(name) {\n        return name.toLowerCase().replace(/\\s/g, '_');\n    }\n\n    /**\n     * Load configuration and set into config\n     * \n     * @return {Promise} config \n     */\n    static reload() {\n        return FunctionsConfig.get().then(config => FunctionsConfig.config = config);\n    }\n\n    static async set(name, value) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`${FunctionsConfig.BaseCommand}:set ${name}=${value}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(value);\n            });\n        });\n    }\n\n    static async unset(name) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`${FunctionsConfig.BaseCommand}:unset ${name}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(name);\n            });\n        });\n    }\n\n}\n"],"file":"functions-config.js"}