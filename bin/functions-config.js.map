{"version":3,"sources":["../lib/functions-config.js"],"names":["FunctionsConfig","get","name","Promise","resolve","reject","command","ChildProcess","exec","error","output","config","JSON","parse","jsonParseError","set","value","unset","getNamesById","group","id","names","push","getIdByName","prop"],"mappings":"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","sourcesContent":["\nimport * as ChildProcess from 'child_process';\n\n/**\n * FunctionsConfig handle configuration in Firebase Functions\n */\nexport class FunctionsConfig {\n\n    static async get(name) {\n        return new Promise((resolve, reject) => {\n            let command = `firebase functions:config:get`;\n\n            if (name) {\n                command = `${command} ${name}`;\n            }\n\n            ChildProcess.exec(command, (error, output) => {\n                if (error) {\n                    return reject(error);\n                }\n\n                try {\n                    let config = JSON.parse(output);\n                    return resolve(config);\n                } catch (jsonParseError) {\n                    return reject(jsonParseError);\n                }\n            });\n        });\n    }\n\n    static async set(name, value) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`firebase functions:config:set ${name}=${value}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(value);\n            });\n        });\n    }\n    \n    static async unset(name) {\n        return new Promise((resolve, reject) => {\n            ChildProcess.exec(`firebase functions:config:unset ${name}`, (error) => {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(name);\n            });\n        });\n    }\n\n    static async getNamesById(group, id, config) {\n        const names = [];\n\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let name in config[group]) {\n                if (config[group][name] === id) {\n                    names.push(name);\n                }\n            }\n        }\n\n        return names;\n    }\n\n    static async getIdByName(group, name, config) {\n        if (!config || !config[group]) {\n            config = await FunctionsConfig.get();\n        }\n\n        if (config && config[group]) {\n            for (let prop in config[group]) {\n                if (prop === name) {\n                    return config[group][prop];\n                }\n            }\n        }\n        return null;\n    }\n}\n"],"file":"functions-config.js"}