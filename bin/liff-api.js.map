{"version":3,"sources":["../lib/liff-api.js"],"names":["axios","require","generateRuntimeConfig","setView","getAPI","runtimeConfig","api","create","headers","line","access_token","add","data","post","JSON","stringify","delete","liffId","get","update","put","addedHandler","response","name","console","log","Promise","reject","Error","module","exports"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA,qBAAF;AAAyBC,EAAAA;AAAzB,IAAqCF,OAAO,CAAC,4BAAD,CAAlD;;AAEA,eAAeG,MAAf,GAAwB;AACpB,QAAMC,aAAa,GAAG,MAAMH,qBAAqB,EAAjD;AACA,QAAMI,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAa;AACrBC,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASH,aAAa,CAACI,IAAd,CAAmBC,YAAa,EADtD;AAEL,sBAAgB;AAFX;AADY,GAAb,CAAZ;AAMA,SAAO;AACHC,IAAAA,GAAG,EAAGC,IAAD,IAAUN,GAAG,CAACO,IAAJ,CAAS,kCAAT,EAA6CC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA7C,CADZ;AAEHI,IAAAA,MAAM,EAAGC,MAAD,IAAYX,GAAG,CAACU,MAAJ,CAAY,oCAAmCC,MAAO,EAAtD,CAFjB;AAGHC,IAAAA,GAAG,EAAE,MAAMZ,GAAG,CAACY,GAAJ,CAAQ,kCAAR,CAHR;AAIHC,IAAAA,MAAM,EAAE,CAACF,MAAD,EAASL,IAAT,KAAkBN,GAAG,CAACc,GAAJ,CAAS,oCAAmCH,MAAO,OAAnD,EAA2DH,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA3D;AAJvB,GAAP;AAMH;;AAGD,SAASS,YAAT,CAAsBC,QAAtB,EAAgCC,IAAhC,EAAsC;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUF,IAAK,qBAA5B,EAAkDD,QAAQ,CAACV,IAAT,CAAcK,MAAhE;;AACA,MAAIK,QAAQ,CAACV,IAAT,IAAiBU,QAAQ,CAACV,IAAT,CAAcK,MAAnC,EAA2C;AACvC,WAAOd,OAAO,CAACoB,IAAD,EAAOD,QAAQ,CAACV,IAAT,CAAcK,MAArB,CAAd;AACH,GAFD,MAEO;AACHO,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACV,IAArB;AACA,WAAOc,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,0BAAV,CAAf,CAAP;AACH;AACJ;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAET,EAAAA,YAAF;AAAgBjB,EAAAA;AAAhB,CAAjB","sourcesContent":["const axios = require('axios');\nconst { generateRuntimeConfig, setView } = require('./local-firebase-functions');\n\nasync function getAPI() {\n    const runtimeConfig = await generateRuntimeConfig();\n    const api = axios.create({\n        headers: {\n            'authorization': `Bearer ${runtimeConfig.line.access_token}`,\n            'content-type': 'application/json'\n        }\n    });\n    return {\n        add: (data) => api.post('https://api.line.me/liff/v1/apps', JSON.stringify(data)),\n        delete: (liffId) => api.delete(`https://api.line.me/liff/v1/apps/${liffId}`),\n        get: () => api.get('https://api.line.me/liff/v1/apps'),\n        update: (liffId, data) => api.put(`https://api.line.me/liff/v1/apps/${liffId}/view`, JSON.stringify(data))\n    };\n}\n\n\nfunction addedHandler(response, name) {\n    console.log(`Created ${name} view with LIFF ID:`, response.data.liffId);\n    if (response.data && response.data.liffId) {\n        return setView(name, response.data.liffId);\n    } else {\n        console.log(response.data);\n        return Promise.reject(new Error('Response without LIFF ID'));\n    }\n}\n\nmodule.exports = { addedHandler, getAPI };\n"],"file":"liff-api.js"}