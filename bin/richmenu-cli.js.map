{"version":3,"sources":["../lib/richmenu-cli.js"],"names":["colors","setTheme","silly","input","verbose","prompt","info","data","help","warn","code","error","commandLineArgs","require","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","type","String","alias","Boolean","indexOf","then","config","accessToken","line","access_token","names","dataSrc","imageSrc","req","res","uploadReq","RichMenuAddRequest","path","resolve","process","cwd","image","fs","existsSync","console","log","exit","send","richMenuId","LIFFConfig","setRichMenu","RichMenuUploadRequest","RichMenuDeleteRequest","id","getRichMenuIdByName","response","message","getRichMenuNamesById","Promise","all","map","unsetRichMenu","RichMenuGetRequest","richmenus","length","detail","util","inspect","table","menu","Object","keys","filter","key","join","size","width","height","chatBarText","selected","areas","RichMenuSetDefaultRequest","pjson","version"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as colors from 'colors';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as util from 'util';\nimport pjson from '../package.json';\nimport { LIFFConfig, RichMenuAddRequest, RichMenuDeleteRequest, RichMenuGetRequest, RichMenuUploadRequest } from './index';\nimport { getValidatedConfig } from './shared';\nimport { RichMenuSetDefaultRequest } from './rich-menu-set-default-request.js';\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    info: 'green',\n    data: 'white',\n    help: 'cyan',\n    warn: 'yellow',\n    code: 'blue',\n    error: 'red'\n});\n\nconst commandLineArgs = require('command-line-args');\nconst { operation, _unknown } = commandLineArgs([\n    { name: 'operation', defaultOption: true }\n], { stopAtFirstUnknown: true });\nconst argv = _unknown || [];\nconst options = commandLineArgs([\n    { name: 'id', type: String },\n    { name: 'data', type: String },\n    { name: 'image', type: String },\n    { name: 'name', type: String },\n    { name: 'type', type: String },\n    { name: 'url', type: String },\n    { name: 'version', alias: 'v', type: Boolean },\n    { name: 'detail', type: Boolean }\n], { argv });\n\n// Commands that need Functions config\nif (['add', 'delete', 'get', 'default'].indexOf(operation) > -1) {\n    getValidatedConfig().then(async (config) => {\n        let accessToken = config.line.access_token;\n        let names;\n        let data;\n        let dataSrc;\n        let imageSrc;\n        let req;\n        let res;\n        let uploadReq;\n\n        switch (operation) {\n            case 'add':\n                req = new RichMenuAddRequest({ accessToken });\n                dataSrc = path.resolve(process.cwd(), options.data || '');\n                imageSrc = path.resolve(process.cwd(), options.image || '');\n                if (options.data && options.image && fs.existsSync(dataSrc) && fs.existsSync(imageSrc)) {\n                    data = require(dataSrc);\n                } else {\n                    console.log('Data file and image file must exist'.error);\n                    process.exit(1);\n                }\n                try {\n                    console.log('Sending request to add RichMenu...'.verbose);\n                    res = await req.send(data);\n                } catch (error) {\n                    console.log(`Failed to add RichMenu`.error);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                try {\n                    console.log(`Created ${options.name.input} with RichMenu ID: ${res.data.richMenuId.info}`.verbose);\n                    await LIFFConfig.setRichMenu(options.name, res.data.richMenuId);\n                } catch (error) {\n                    console.log(`Failed to set Functions configuration`.error);\n                    console.log(`Try re-run with the following command`.help);\n                    console.log(`firebase functions:config:set richmenus.${options.name}=${res.data.richMenuId}`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                try {\n                    console.log(`Uploading image for RichMenu ${res.data.richMenuId.info}`.verbose);\n                    uploadReq = new RichMenuUploadRequest({ accessToken });\n                    await uploadReq.send(res.data.richMenuId, imageSrc);\n                    console.log(`Uploaded`);\n                } catch (error) {\n                    console.log(`Failed to upload image`.error);\n                    console.error(error);\n                    process.exit(1);\n                }\n                break;\n\n            case 'delete':\n                req = new RichMenuDeleteRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'richmenu delete'.prompt} required RichMenu ID or name option`.warn);\n                    console.log(`Try re-run ${'richmenu delete --id <richMenuId>'.input} OR  ${'richmenu delete --name <richMenuName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (options.name) {\n                    options.id = await LIFFConfig.getRichMenuIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    console.log(`Sending request to delete RichMenu ${options.id.input}`.verbose);\n                    res = await req.send(options.id);\n                    console.log(`Deleted RichMenu ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message) {\n                            console.log(error.response.data.message.info);\n                        } else {\n                            console.log(`Failed to delete RichMenu ${options.id.input}`.error);\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.log(`Failed to delete RichMenu ${options.id.input}`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    names = await LIFFConfig.getRichMenuNamesById(options.id, config);\n                    await Promise.all(names.map(name => LIFFConfig.unsetRichMenu(name)));\n                    console.log(`Unset richmenu(s) in Functions configuration`.info, names);\n                } catch (error) {\n                    console.log(`Failed to unset richmenu(s) in Functions configuration`.error);\n                    console.log(`Try looking for RichMenu name with RichMenu ID ${options.id.input} using ${'richmenu get'.prompt} command and unset it manually`.help);\n                    console.log(`firebase functions:config:unset richmenus.<richMenuName>`.code);\n                    console.error(error);\n                    process.exit(1);\n                }\n                break;\n\n            case 'get':\n                try {\n                    console.log('Sending request to get RichMenu(s)...'.verbose);\n                    req = new RichMenuGetRequest({ accessToken });\n                    res = await req.send();\n\n                    if (!res.data.richmenus || res.data.richmenus.length === 0) {\n                        console.log('RichMenu not found');\n                        process.exit(0);\n                    }\n\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message) {\n                            console.log(error.response.data.message.info);\n                            process.exit(0);\n                        } else {\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                if (options.detail === true) {\n                    console.log(util.inspect(res.data.richmenus, false, null, true));\n                } else {\n                    console.table(res.data.richmenus.map(menu => {\n                        const richmenus = Object.keys(config.richmenus).filter(key => {\n                            return config.richmenus[key] === menu.richMenuId;\n                        });\n\n                        return {\n                            'RichMenu': richmenus.join(', '),\n                            'RichMenu ID': menu.richMenuId,\n                            'Size': `${menu.size.width}x${menu.size.height}`,\n                            'Bar Text': menu.chatBarText,\n                            'Selected': menu.selected,\n                            'No. of Areas': menu.areas.length\n                        };\n                    }));\n                }\n\n                break;\n\n            case 'default': // Set menu as default for all users\n                req = new RichMenuSetDefaultRequest({ accessToken });\n                if (!options.id && !options.name) {\n                    console.warn(`Command ${'richmenu default'.prompt} required RichMenu ID or name option`.warn);\n                    console.log(`Try re-run ${'richmenu default --id <richMenuId>'.input} OR  ${'richmenu default --name <richMenuName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (options.name) {\n                    options.id = await LIFFConfig.getRichMenuIdByName(options.name, config);\n                    if (typeof options.id !== 'string') {\n                        console.error(`Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    console.log(`Sending request to set RichMenu ${options.id.input} as default`.verbose);\n                    res = await req.send(options.id);\n                    console.log(`Set default RichMenu ID: ${options.id.input}`.verbose);\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message) {\n                            console.log(error.response.data.message.info);\n                        } else {\n                            console.log(`Failed to set RichMenu ${options.id.input} as default`.error);\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.log(`Failed to set RichMenu ${options.id.input} as default`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                break;\n            default:\n\n        }\n\n    });\n} else if (operation) {\n    switch (operation) {\n        case 'version':\n            console.log(`Version: ${pjson.version}`);\n            break;\n        case 'help':\n        default:\n        // TODO: Display help message\n    }\n} else if (options.version) {\n    console.log(`Version: ${pjson.version}`);\n}\n"],"file":"richmenu-cli.js"}