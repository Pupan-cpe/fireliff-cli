{"version":3,"sources":["../lib/richmenu-cli.js"],"names":["commandLineArgs","require","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","type","String","alias","Boolean","indexOf","then","config","accessToken","line","access_token","names","data","dataSrc","imageSrc","req","res","uploadReq","RichMenuAddRequest","path","resolve","process","cwd","image","fs","existsSync","console","log","error","exit","verbose","send","input","richMenuId","info","LIFFConfig","setRichMenu","help","code","RichMenuUploadRequest","RichMenuDeleteRequest","id","warn","prompt","getRichMenuIdByName","response","message","getRichMenuNamesById","Promise","all","map","unsetRichMenu","RichMenuGetRequest","richmenus","length","detail","util","inspect","table","menu","Object","keys","filter","key","join","size","width","height","chatBarText","selected","areas","RichMenuSetDefaultRequest","RichMenuLinkUserRequest","user","RichMenuUnlinkUserRequest","pjson","version","commandError"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as util from 'util';\nimport './colors-set-theme';\nimport pjson from '../package.json';\nimport { LIFFConfig, RichMenuAddRequest, RichMenuDeleteRequest, RichMenuLinkUserRequest, RichMenuGetRequest, RichMenuUploadRequest, RichMenuSetDefaultRequest, RichMenuUnlinkUserRequest } from './index';\nimport { commandErrorHandler, getConfig, validateConfig } from './shared';\n\ntry {\n    const commandLineArgs = require('command-line-args');\n    const { operation, _unknown } = commandLineArgs([\n        { name: 'operation', defaultOption: true }\n    ], { stopAtFirstUnknown: true });\n    const argv = _unknown || [];\n    const options = commandLineArgs([\n        { name: 'id', type: String },\n        { name: 'data', type: String },\n        { name: 'image', type: String },\n        { name: 'name', type: String },\n        { name: 'type', type: String },\n        { name: 'url', type: String },\n        { name: 'user', alias: 'U', type: String },\n        { name: 'version', alias: 'v', type: Boolean },\n        { name: 'detail', type: Boolean }\n    ], { argv });\n\n    // Commands that need Functions config\n    if (['add', 'delete', 'get', 'default', 'link', 'unlink'].indexOf(operation) > -1) {\n        getConfig().then(async (config) => {\n            let accessToken = config.line.access_token;\n            let names;\n            let data;\n            let dataSrc;\n            let imageSrc;\n            let req;\n            let res;\n            let uploadReq;\n\n            validateConfig(config);\n\n            switch (operation) {\n                case 'add':\n                    req = new RichMenuAddRequest({ accessToken });\n                    dataSrc = path.resolve(process.cwd(), options.data || '');\n                    imageSrc = path.resolve(process.cwd(), options.image || '');\n                    if (options.data && options.image && fs.existsSync(dataSrc) && fs.existsSync(imageSrc)) {\n                        data = require(dataSrc);\n                    } else {\n                        console.log('Data file and image file must exist'.error);\n                        process.exit(1);\n                    }\n                    try {\n                        console.log('Sending request to add RichMenu...'.verbose);\n                        res = await req.send(data);\n                    } catch (error) {\n                        console.log(`Failed to add RichMenu`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n\n                    try {\n                        console.log(`Created ${options.name.input} with RichMenu ID: ${res.data.richMenuId.info}`.verbose);\n                        await LIFFConfig.setRichMenu(options.name, res.data.richMenuId);\n                    } catch (error) {\n                        console.log(`Failed to set Functions configuration`.error);\n                        console.log(`Try re-run with the following command`.help);\n                        console.log(`firebase functions:config:set richmenus.${options.name}=${res.data.richMenuId}`.code);\n                        console.error(error);\n                        process.exit(1);\n                    }\n\n                    try {\n                        console.log(`Uploading image for RichMenu ${res.data.richMenuId.info}`.verbose);\n                        uploadReq = new RichMenuUploadRequest({ accessToken });\n                        await uploadReq.send(res.data.richMenuId, imageSrc);\n                        console.log(`Uploaded`);\n                    } catch (error) {\n                        console.log(`Failed to upload image`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n\n                    break;\n\n                case 'delete':\n                    req = new RichMenuDeleteRequest({ accessToken });\n                    if (!options.id && !options.name) {\n                        console.warn(`Command ${'richmenu delete'.prompt} required RichMenu ID or name option`.warn);\n                        console.log(`Try re-run ${'richmenu delete --id <richMenuId>'.input} OR  ${'richmenu delete --name <richMenuName>'.input}`.help);\n                        process.exit(1);\n                    }\n\n                    if (options.name) {\n                        options.id = await LIFFConfig.getRichMenuIdByName(options.name, config);\n                        if (typeof options.id !== 'string') {\n                            console.error(`Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`.error);\n                            process.exit(1);\n                        }\n                    }\n\n                    try {\n                        console.log(`Sending request to delete RichMenu ${options.id.input}`.verbose);\n                        res = await req.send(options.id);\n                        console.log(`Deleted RichMenu ID: ${options.id.input}`.verbose);\n                    } catch (error) {\n                        if (error.response && error.response.data) {\n                            if (error.response.data.message) {\n                                console.log(error.response.data.message.info);\n                            } else {\n                                console.log(`Failed to delete RichMenu ${options.id.input}`.error);\n                                console.error(error.response.data.error);\n                                process.exit(1);\n                            }\n                        } else {\n                            console.log(`Failed to delete RichMenu ${options.id.input}`.error);\n                            console.error(error);\n                            process.exit(1);\n                        }\n                    }\n\n                    try {\n                        names = await LIFFConfig.getRichMenuNamesById(options.id, config);\n                        await Promise.all(names.map(name => LIFFConfig.unsetRichMenu(name)));\n                        console.log(`Unset richmenu(s) in Functions configuration`.info, names);\n                    } catch (error) {\n                        console.log(`Failed to unset richmenu(s) in Functions configuration`.error);\n                        console.log(`Try looking for RichMenu name with RichMenu ID ${options.id.input} using ${'richmenu get'.prompt} command and unset it manually`.help);\n                        console.log(`firebase functions:config:unset richmenus.<richMenuName>`.code);\n                        console.error(error);\n                        process.exit(1);\n                    }\n\n                    break;\n\n                case 'get':\n                    try {\n                        console.log('Sending request to get RichMenu(s)...'.verbose);\n                        req = new RichMenuGetRequest({ accessToken });\n                        res = await req.send();\n\n                        if (!res.data.richmenus || res.data.richmenus.length === 0) {\n                            console.log('RichMenu not found');\n                            process.exit(0);\n                        }\n\n                    } catch (error) {\n                        if (error.response && error.response.data) {\n                            if (error.response.data.message) {\n                                console.log(error.response.data.message.info);\n                                process.exit(0);\n                            } else {\n                                console.error(error.response.data.error);\n                                process.exit(1);\n                            }\n                        } else {\n                            console.error(error);\n                            process.exit(1);\n                        }\n                    }\n\n                    if (options.detail === true) {\n                        console.log(util.inspect(res.data.richmenus, false, null, true));\n                    } else {\n                        console.table(res.data.richmenus.map(menu => {\n                            const richmenus = Object.keys(config.richmenus).filter(key => {\n                                return config.richmenus[key] === menu.richMenuId;\n                            });\n\n                            return {\n                                'RichMenu': richmenus.join(', '),\n                                'RichMenu ID': menu.richMenuId,\n                                'Size': `${menu.size.width}x${menu.size.height}`,\n                                'Bar Text': menu.chatBarText,\n                                'Selected': menu.selected,\n                                'No. of Areas': menu.areas.length\n                            };\n                        }));\n                    }\n\n                    break;\n\n                case 'default': // Set menu as default for all users\n                    req = new RichMenuSetDefaultRequest({ accessToken });\n                    if (!options.id && !options.name) {\n                        console.warn(`Command ${'richmenu default'.prompt} required RichMenu ID or name option`.warn);\n                        console.log(`Try re-run ${'richmenu default --id <richMenuId>'.input} OR  ${'richmenu default --name <richMenuName>'.input}`.help);\n                        process.exit(1);\n                    }\n\n                    if (options.name) {\n                        options.id = await LIFFConfig.getRichMenuIdByName(options.name, config);\n                        if (typeof options.id !== 'string') {\n                            console.error(`Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`.error);\n                            process.exit(1);\n                        }\n                    }\n\n                    try {\n                        console.log(`Sending request to set RichMenu ${options.id.input} as default`.verbose);\n                        res = await req.send(options.id);\n                        console.log(`Set default RichMenu ID: ${options.id.input}`.verbose);\n                    } catch (error) {\n                        if (error.response && error.response.data) {\n                            if (error.response.data.message) {\n                                console.log(error.response.data.message.info);\n                            } else {\n                                console.log(`Failed to set RichMenu ${options.id.input} as default`.error);\n                                console.error(error.response.data.error);\n                                process.exit(1);\n                            }\n                        } else {\n                            console.log(`Failed to set RichMenu ${options.id.input} as default`.error);\n                            console.error(error);\n                            process.exit(1);\n                        }\n                    }\n\n                    break;\n\n                case 'link': // Link a rich menu to an individual user\n                    req = new RichMenuLinkUserRequest({ accessToken });\n                    if ((!options.id && !options.name) || !options.user) {\n                        console.warn(`Command ${'richmenu link'.prompt} required RichMenu ID or name option, and user option`.warn);\n                        console.log(`Try re-run ${'richmenu link --id <richMenuId> --user <userId>'.input} OR  ${'richmenu link --name <richMenuName> --user <userId>'.input}`.help);\n                        process.exit(1);\n                    }\n\n                    if (options.name) {\n                        options.id = await LIFFConfig.getRichMenuIdByName(options.name, config);\n                        if (typeof options.id !== 'string') {\n                            console.error(`Failed to retrieve RichMenu ID using RichMenu name ${options.name.input}`.error);\n                            process.exit(1);\n                        }\n                    }\n\n                    try {\n                        console.log(`Sending request to link RichMenu ${options.id.input} to User ${options.user}`.verbose);\n                        res = await req.send(options.id, options.user);\n                        console.log(`Linked RichMenu ID ${options.id.input} to User ${options.user.input}`.verbose);\n                    } catch (error) {\n                        if (error.response && error.response.data) {\n                            if (error.response.data.message) {\n                                console.log(error.response.data.message.info);\n                            } else {\n                                console.log(`Failed to link RichMenu ${options.id.input} to User ${options.user.input}`.error);\n                                console.error(error.response.data.error);\n                                process.exit(1);\n                            }\n                        } else {\n                            console.log(`Failed to link RichMenu ${options.id.input} to User ${options.user.input}`.error);\n                            console.error(error);\n                            process.exit(1);\n                        }\n                    }\n\n                    break;\n\n                case 'unlink':\n                    req = new RichMenuUnlinkUserRequest({ accessToken });\n                    if (!options.user) {\n                        console.warn(`Command ${'richmenu unlink'.prompt} required user option`.warn);\n                        console.log(`Try re-run ${'richmenu unlink --user <userId>'.input}`.help);\n                        process.exit(1);\n                    }\n\n                    try {\n                        console.log(`Sending request to unlink RichMenu from User ${options.user}`.verbose);\n                        res = await req.send(options.user);\n                        console.log(`Unlinked RichMenu from User ${options.user.input}`.verbose);\n                    } catch (error) {\n                        if (error.response && error.response.data) {\n                            if (error.response.data.message) {\n                                console.log(error.response.data.message.info);\n                            } else {\n                                console.log(`Failed to unlink RichMenu from User ${options.user.input}`.error);\n                                console.error(error.response.data.error);\n                                process.exit(1);\n                            }\n                        } else {\n                            console.log(`Failed to unlink RichMenu from User ${options.user.input}`.error);\n                            console.error(error);\n                            process.exit(1);\n                        }\n                    }\n\n                    break;\n\n                default:\n\n            }\n\n        });\n    } else if (operation) {\n        switch (operation) {\n            case 'version':\n                console.log(`Version: ${pjson.version}`);\n                break;\n            case 'help':\n            default:\n            // TODO: Display help message\n        }\n    } else if (options.version) {\n        console.log(`Version: ${pjson.version}`);\n    }\n} catch (commandError) {\n    commandErrorHandler(commandError);\n}\n"],"file":"richmenu-cli.js"}