{"version":3,"sources":["../lib/cli.js"],"names":["colors","setTheme","silly","input","verbose","prompt","info","data","help","warn","code","error","Commander","require","version","pjson","command","option","action","operation","cmd","accessToken","config","viewNames","req","res","console","log","FunctionsConfig","get","line","access_token","process","exit","LIFFAddRequest","view","type","url","send","name","liffId","LIFFConfig","setView","LIFFDeleteRequest","id","getViewIdByName","response","message","getViewNamesById","Promise","all","map","viewName","unsetView","LIFFGetRequest","table","apps","app","views","Object","keys","filter","key","join","LIFFUpdateRequest","getViewNameById","parse","argv"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport * as colors from 'colors';\nimport pjson from '../package.json';\nimport { FunctionsConfig, LIFFAddRequest, LIFFConfig, LIFFDeleteRequest, LIFFGetRequest, LIFFUpdateRequest } from './index';\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'grey',\n    info: 'green',\n    data: 'white',\n    help: 'cyan',\n    warn: 'yellow',\n    code: 'blue',\n    error: 'red'\n});\n\nconst Commander = require('commander');\n\nCommander\n    .version(pjson.version, '-v, --version')\n    .command('fliff <operation>')\n    .option('--id <id>', 'LIFF view id in Firebase Functions configuration')\n    .option('--name <name>', 'LIFF view name in Firebase Functions configuration')\n    .option('--type <type>', 'LIFF view type could be compact|tall|full')\n    .option('--url <url>', 'LIFF view URL')\n    .action(async (operation, cmd) => {\n        let accessToken;\n        let config;\n        let viewNames;\n        let data;\n        let req;\n        let res;\n\n        try {\n            console.log('Get Firebase Functions configuration'.verbose);\n            config = await FunctionsConfig.get();\n            if (!config.line || !config.line.access_token) {\n                console.log('Functions configuration not found: line.access_token'.help);\n                console.log('Find your LINE channel access token and use with the following command'.help);\n                console.log(`${'firebase functions:config:set line.access_token='.code}${'<channelAccessToken>'.prompt}`);\n                process.exit(1);\n            }\n            accessToken = config.line.access_token;\n        } catch (error) {\n            console.log('Failed to get configuration'.error);\n            console.error(error);\n            process.exit(1);\n        }\n\n        switch (operation) {\n            case 'add':\n                req = new LIFFAddRequest({ accessToken });\n                data = {\n                    view: {\n                        type: cmd.type,\n                        url: cmd.url\n                    }\n                };\n                try {\n                    console.log('Sending request to add LIFF view...'.verbose);\n                    res = await req.send(data);\n                } catch (error) {\n                    console.log(`Failed to add LIFF view`.error);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                try {\n                    console.log(`Created ${cmd.name.input} view with LIFF ID: ${res.data.liffId.info}`.verbose);\n                    await LIFFConfig.setView(cmd.name, res.data.liffId);\n                } catch (error) {\n                    console.log(`Failed to set Functions configuration`.error);\n                    console.log(`Try re-run with the following command`.help);\n                    console.log(`firebase functions:config:set views.${cmd.name}=${res.data.liffId}`.prompt);\n                    console.error(error);\n                    process.exit(1);\n                }\n\n                break;\n\n            case 'delete':\n                req = new LIFFDeleteRequest({ accessToken });\n                if (!cmd.id && !cmd.name) {\n                    console.warn(`Command ${'fliff delete'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run ${'fliff delete --id <liffId>'.input} OR  ${'fliff delete --name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (cmd.name) {\n                    cmd.id = LIFFConfig.getViewIdByName(cmd.name, config);\n                    if (typeof cmd.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${cmd.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    console.log(`Sending request to delete LIFF view ${cmd.id.input}`.verbose);\n                    res = await req.send(cmd.id);\n                    console.log(`Deleted view with LIFF ID: ${cmd.id.input}`.verbose);\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'not found') {\n                            console.log('LIFF app not found'.info);\n                        } else {\n                            console.log(`Failed to delete LIFF view ${cmd.id.input}`.error);\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.log(`Failed to delete LIFF view ${cmd.id.input}`.error);\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                try {\n                    viewNames = LIFFConfig.getViewNamesById(cmd.id, config);\n                    await Promise.all(viewNames.map(viewName => LIFFConfig.unsetView(viewName)));\n                    console.log(`Unset view(s) in Functions configuration`.info, viewNames);\n                } catch (error) {\n                    console.log(`Failed to unset view(s) in Functions configuration`.error);\n                    console.log(`Try looking for view name with LIFF ID ${cmd.id.input} using ${'fliff get'.prompt} command and unset it manually`.help);\n                    console.log(`firebase functions:config:unset views.<viewName>`.prompt);\n                    console.error(error);\n                    process.exit(1);\n                }\n                break;\n\n            case 'get':\n                req = new LIFFGetRequest({ accessToken });\n                try {\n                    console.log('Sending request to get LIFF view(s)...'.verbose);\n                    res = await req.send();\n                    console.table(res.data.apps.map(app => {\n                        const views = Object.keys(config.views).filter(key => {\n                            return config.views[key] === app.liffId;\n                        });\n\n                        return {\n                            'View': views.join(', '),\n                            'LIFF ID': app.liffId,\n                            'Type': app.view.type,\n                            'URL': app.view.url\n                        };\n                    }));\n                } catch (error) {\n                    if (error.response && error.response.data) {\n                        if (error.response.data.message === 'no apps') {\n                            console.log('LIFF app not found'.info);\n                            process.exit(0);\n                        } else {\n                            console.error(error.response.data.error);\n                            process.exit(1);\n                        }\n                    } else {\n                        console.error(error);\n                        process.exit(1);\n                    }\n                }\n\n                break;\n\n            case 'update':\n                req = new LIFFUpdateRequest({ accessToken });\n                if (!cmd.id && !cmd.name) {\n                    console.warn(`Command ${'fliff update'.prompt} required LIFF ID or name option`.warn);\n                    console.log(`Try re-run with option ${'--id <liffId>'.input} OR ${'--name <viewName>'.input}`.help);\n                    process.exit(1);\n                }\n\n                if (!cmd.id) {\n                    cmd.id = LIFFConfig.getViewIdByName(cmd.name, config);\n                    if (typeof cmd.id !== 'string') {\n                        console.error(`Failed to retrieve LIFF ID with view name ${cmd.name.input}`.error);\n                        process.exit(1);\n                    }\n                }\n                if (!cmd.name) {\n                    cmd.name = LIFFConfig.getViewNameById(cmd.id, config);\n                    if (typeof cmd.name !== 'string') {\n                        console.error(`Failed to retrieve view name with LIFF ID ${cmd.id.input}`.error);\n                        process.exit(1);\n                    }\n                }\n\n                if (!cmd.type || !cmd.url) {\n                    console.warn(`Command ${'fliff update'.prompt} required both LIFF type AND url options to be updated`.warn);\n                    console.log(`Try re-run with options ${'--type <type> --url <url>'.input}`.help);\n                    process.exit(1);\n                }\n\n                data = {\n                    type: cmd.type,\n                    url: cmd.url\n                };\n\n                try {\n                    console.log(`Sending request to update LIFF view ${cmd.id.input}`.verbose);\n                    res = await req.send(cmd.id, data);\n                    console.log(`Updated view with LIFF ID: ${cmd.id.input}`.verbose);\n                } catch (error) {\n                    console.log(`Failed to update LIFF view ${cmd.id.input}`.error);\n                    if (error.response && error.response.data && error.response.data.message) {\n                        console.log(error.response.data.message.error, data);\n                    } else {\n                        console.error(error);\n                    }\n                    process.exit(1);\n                }\n\n                break;\n\n            default:\n\n        }\n    });\n\nCommander.parse(process.argv);\n"],"file":"cli.js"}