{"version":3,"sources":["../lib/things-cli.js"],"names":["versionText","pjson","version","help","commandLineArgs","require","commandLineUsage","operation","_unknown","name","defaultOption","stopAtFirstUnknown","argv","options","alias","type","Boolean","String","things","Things","console","log","getUsage","createUsage","deleteUsage","thingsUsage","process","exit","indexOf","then","validateConfig","liff","product","error","prompt","warn","EOL","input","createTrial","result","id","user","getProduct","catch","message","toString","commandError"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'console.table';\nimport './colors-set-theme';\nimport thingsUsage, { createUsage, deleteUsage, getUsage } from './things-cli-usage';\nimport { commandErrorHandler, getConfig, validateConfig } from './shared';\nimport { Things } from './things.js';\nimport pjson from '../package.json';\n\nconst versionText = `Things CLIs v${pjson.version} for Things API v1`.help;\n\ntry {\n    const commandLineArgs = require('command-line-args');\n    const commandLineUsage = require('command-line-usage');\n\n    const { operation, _unknown } = commandLineArgs([\n        { name: 'operation', defaultOption: true }\n    ], { stopAtFirstUnknown: true });\n    const argv = _unknown || [];\n    const options = commandLineArgs([\n        { name: 'help', alias: 'h', type: Boolean },\n        { name: 'id', type: String },\n        { name: 'liff', type: String },\n        { name: 'product', alias: 'p', type: String },\n        { name: 'user', type: String },\n        { name: 'version', alias: 'v', type: Boolean }\n    ], { argv });\n\n    const things = new Things();\n\n    if (options.help) {\n        switch (operation) {\n            case 'get': console.log(commandLineUsage(getUsage)); break;\n            case 'create': console.log(commandLineUsage(createUsage)); break;\n            case 'delete': console.log(commandLineUsage(deleteUsage)); break;\n            default: console.log(commandLineUsage(thingsUsage));\n        }\n        process.exit(0);\n    }\n\n    if (['create:trial', 'delete:trial', 'get:device', 'get:product'].indexOf(operation) > -1) {\n        getConfig()\n            .then(validateConfig)\n            .then(() => {\n\n                switch (operation) {\n\n                    case 'create:trial':\n                        if (!options.liff || !options.product) {\n                            console.error(`Command ${'things create:trial'.prompt} required LIFF ID and product name`.warn + EOL +\n                                `Try re-run with option ${'--liff <liffId>'.input} and ${'--product <productName>'.input}`.help);\n                            process.exit(1);\n                        }\n\n                        return things.createTrial(options.liff, options.product)\n                            .then(result => {\n                                console.log(result);\n                                return;\n                            });\n\n                    case 'delete:trial':\n                        break;\n\n                    case 'get:device':\n                        if (!options.id) {\n                            console.error(`Command ${'things get:device'.prompt} required Device ID option`.warn + EOL +\n                                `Try re-run with option ${'--id <deviceId>'.input}`.help);\n                            process.exit(1);\n                        }\n                        if (!options.user) {\n                            things.getProduct(options.id);\n                        }\n                        break;\n\n                    case 'get:product':\n                        break;\n\n                }\n\n                return;\n            })\n            .catch(error => {\n                console.error(error.message || error.toString());\n                process.exit(1);\n            });\n\n    } else if (operation) {\n        switch (operation) {\n            case 'version':\n                console.log(versionText);\n                break;\n            case 'help':\n            default:\n                console.log(commandLineUsage(thingsUsage));\n        }\n    } else if (options.version) {\n        console.log(versionText);\n    } else {\n        console.log(commandLineUsage(thingsUsage));\n    }\n} catch (commandError) {\n    commandErrorHandler(commandError);\n}\n"],"file":"things-cli.js"}